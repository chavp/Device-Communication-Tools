@{
    ViewBag.Title = "Device Communication Messages";
}

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false">  </script>

<script src="@Url.Content("~/app/model/Message.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/MessageCode.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/BinRawData.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/ImpactAlert1.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/ImpactAlert2.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/GpsAwake.js")" type="text/javascript"></script>

<script src="@Url.Content("~/app/view/device/ObdDtcCodesAlertWindow.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/HistogramBinRawDataWindow.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/ImpactAlert1Window.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/ImpactAlert2Window.js")" type="text/javascript"></script>

<script src="@Url.Content("~/app/view/device/SimulationScriptWindow.js")" type="text/javascript"></script>

<script src="@Url.Content("~/app/view/device/ObdWindow.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/GpsAwakeArrayWindow.js")" type="text/javascript"></script>

@section script{

<script type="text/javascript">
    window.BaseUrl = '@Url.Action("", "Devices", null, null)';

    Ext.Loader.setConfig({ enabled: true });
    Ext.Loader.setPath('Ext.ux', '@Url.Content("~/Scripts/extjs/ux")');

    Ext.require([
        'Ext.window.*',
        'Ext.ux.grid.FiltersFeature',
        'Ext.ux.GMapPanel'
    ]);

    Ext.onReady(function () {
        var carIcon = '@Url.Content("~/Content/map-icons-collection-2.0/icons/car.png")';

        var direction_up_icon = '@Url.Content("~/Content/heading/direction_up.png")';
        var direction_upright_icon = '@Url.Content("~/Content/heading/direction_upright.png")';
        var direction_right_icon = '@Url.Content("~/Content/heading/direction_right.png")';
        var direction_upleft_icon = '@Url.Content("~/Content/heading/direction_upleft.png")';
        var direction_downright_icon = '@Url.Content("~/Content/heading/direction_downright.png")';
        var direction_left_icon = '@Url.Content("~/Content/heading/direction_left.png")';
        var direction_down_icon = '@Url.Content("~/Content/heading/direction_down.png")';
        var direction_downleft_icon = '@Url.Content("~/Content/heading/direction_downleft.png")';

        Ext.QuickTips.init();

        var messageStoreUrl = '@Url.Action("MessagesPaging", "Devices", new {imei = ViewBag.Imei})';

        var messageStore = new Ext.data.JsonStore({
            model: 'DeviceCommunication.model.Message',
            autoLoad: true,
            pageSize: 300,
            proxy: {
                type: 'ajax',
                url: messageStoreUrl,
                reader: {
                    type: 'json',
                    root: 'data',
                    totalProperty: 'total'
                },
                timeout: 120000,
                listeners: {
                    exception: function (proxy, response, operation) {
                        Ext.Msg.show({
                            title: response.statusText,
                            msg: Ext.decode(response.responseText).message,
                            buttons: Ext.Msg.OK,
                            icon: Ext.window.MessageBox.ERROR
                        });
                    }
                }
            }
        });

        //http://thekindofme.wordpress.com/2009/02/05/a-grid-with-ajax-pagination-sorting-filtering-on-aspnet-mvc-with-extjs-and-ef/
        var filters = {
            ftype: 'filters',
            encode: false,
            local: false,
            filters: [
                 { type: 'string', dataIndex: 'MessageType' }
            ]
        };

        var mark = null;
        var cycle = null;
        var rec = null;

        var _latlng = null;
        var _heading = null;

        var storeMsgCode = new Ext.data.JsonStore({
            model: 'DeviceCommunication.model.MessageCode',
            proxy: {
                type: 'ajax',
                reader: {
                    type: 'json',
                    root: 'data'
                }
            },
            listeners: {
                'load': function (store, records, options) {

                    var googleMap = Ext.getCmp('google-map');
                    if (cycle != null) cycle.setMap(null);
                    if (rec != null) rec.setMap(null);
                    if (mark != null) mark.setMap(null);

                    //googleMap.getMap().clearOverlays();

                    var sendAgainAction = Ext.getCmp('send-again-action');
                    //sendAgainAction.disable();
                    //alert(sendAgainAction.id);

                    if (records.length > 0) {
                        var record_1 = records[0];
                        var name = record_1.get('Name');
                        var val = record_1.get('Value');

                        if (name === "MessageType") {
                            if (val === "GeoPoint" ||
                                val === "TowingAlert" ||
                                val === "EngineStartStopAlert" ||
                                val === "IdlingAlert" ||
                                val === "GpsFixAlert" ||
                                val === "GeoFenceAlert" ||
                                val === "VehicleBatteryLowAlert" ||
                                val === "ObdCore" ||
                                val === "ButtonTriggered") {

                                if (val === "GeoFenceAlert") {
                                    //googleMap.drawCircle(latlng, 50, 40);
                                    //get geofence
                                    for (var i = 1; i < records.length; i++) {
                                        var record = records[i];
                                        var name = record.get('Name');
                                        var val = record.get('Value');
                                        if (name === "GeofenceId") {
                                            var geofenceId = val;
                                            if (geofenceId !== 0) {
                                                var msgGrid = Ext.getCmp('msgGridpanel');
                                                var selectedRows = msgGrid.getSelectionModel().getSelection();
                                                var packetId = selectedRows[0].get('PacketId');

                                                var host = '@Url.Action("GetGeoFence", "Devices")';

                                                $.ajax({
                                                    type: "POST",
                                                    cache: false,
                                                    data: "{'packetId': '" + packetId + "'}",
                                                    //async: false,
                                                    url: host,
                                                    contentType: "application/json; charset=utf-8",
                                                    dataType: "json",
                                                    success: function (result) {
                                                        var geoFence = result.data;
                                                        var imei = geoFence.Imei;
                                                        var geofenceId = geoFence.GeoFenceId;
                                                        var description = geoFence.Description;
                                                        var geoFenceRadius = geoFence.GeoFenceRadius;

                                                        var geoFenceLatitude = geoFence.GeoFenceLatitude;
                                                        var geoFenceLongitude = geoFence.GeoFenceLongitude;
                                                        var geoFenceLatitudeUpperRight = geoFence.GeoFenceLatitudeUpperRight;
                                                        var geoFenceLongitudeUpperRight = geoFence.GeoFenceLongitudeUpperRight;

                                                        var center = new google.maps.LatLng(geoFenceLatitude, geoFenceLongitude);
                                                        var upperRight = new google.maps.LatLng(geoFenceLatitudeUpperRight, geoFenceLongitudeUpperRight);

                                                        if (geoFenceRadius === 0) {

                                                            //googleMap.drawRectangle(center, upperRight);
                                                            var recOptions = {
                                                                bounds: new google.maps.LatLngBounds(center, upperRight),
                                                                strokeColor: "#FF0000",
                                                                strokeOpacity: 0.8,
                                                                map: googleMap.getMap()
                                                            };

                                                            rec = new google.maps.Rectangle(recOptions);
                                                        } else {//Cycle

                                                            var cycleOptions = {
                                                                center: center,
                                                                radius: geoFenceRadius,
                                                                strokeWeight: 2,
                                                                strokeColor: "#FF0000",
                                                                strokeOpacity: 0.8,
                                                                map: googleMap.getMap()
                                                            };
                                                            //console.log("Cycle:" + geoFenceRadius);
                                                            cycle = new google.maps.Circle(cycleOptions);
                                                            //googleMap.drawCircle(center, geoFenceRadius, 40);
                                                        }

                                                        //alert(imei + ", " + geofenceId + ", " + description);
                                                    },
                                                    error: function (xhr, ajaxOptions, thrownError) {
                                                        alert(xhr.status + " " + thrownError);
                                                        setTimeout(updateLastKnownLocation, 3000);
                                                    }
                                                });
                                            }
                                        }

                                    }
                                }

                                var lat = 0.0;
                                var lng = 0.0;
                                var heading = 0;

                                for (var i = 1; i < records.length; i++) {
                                    var record = records[i];
                                    var name = record.get('Name');
                                    var val = record.get('Value');
                                    if (name === "Latitude" && val !== 'NA') {
                                        lat = val;
                                    }
                                    else if (name === "Longitude" && val !== 'NA') {
                                        lng = val;
                                    }
                                    else if (name === "Heading") {
                                        heading = val;
                                    }
                                }

                                var latlng = new google.maps.LatLng(lat, lng);

                                mark = new google.maps.Marker(
                                    {
                                        position: latlng,
                                        title: "(" + lat + ", " + lng + ")",
                                        map: googleMap.getMap(),
                                        icon: carIcon
                                    }
                                );

                                if (heading >= 338 || heading < 23) {
                                    mark.icon = direction_up_icon;
                                }
                                else if (23 <= heading && heading < 68) {
                                    mark.icon = direction_upright_icon;
                                }
                                else if (68 <= heading && heading < 113) {
                                    mark.icon = direction_right_icon;
                                }
                                else if (113 <= heading && heading < 158) {
                                    mark.icon = direction_downright_icon;
                                }
                                else if (158 <= heading && heading < 203) {
                                    mark.icon = direction_down_icon;
                                }
                                else if (203 <= heading && heading < 248) {
                                    mark.icon = direction_downleft_icon;
                                }
                                else if (248 <= heading && heading < 293) {
                                    mark.icon = direction_left_icon;
                                }
                                else if (293 <= heading && heading < 338) {
                                    mark.icon = direction_upleft_icon;
                                }

                                mark.size = new google.maps.Size(32, 40);

                                //googleMap.getMap().clearOverlays();

                                //googleMap.getMap().addOverlay(mark);
                                googleMap.getMap().panTo(latlng);

                                _latlng = latlng;
                                _heading = heading;
                                try {
                                    _map_panorama = new google.maps.StreetViewPanorama($("#map_panorama").get(0));
                                    _map_panorama.setPov({ heading: parseInt(_heading), pitch: 10, zoom: 1 });
                                    _map_panorama.setPosition(_latlng);
                                } catch (err) { }
                            }

                        }

                        if (name === "ButtonTriggered") {
                            sendAgainAction.enable();
                        }
                    }


                }
            }
        });

        var items = [];

        //        items.push(
        //            { region: 'north',
        //                xtype: 'box',
        //                height: 40,
        //                maxHeight: 40,
        //                html: '<h2>IMEI: @ViewBag.Imei</h2>'
        //            }
        //        );


        items.push(
            { title: 'Messages [IMEI: ' + '@ViewBag.Imei' + ']',
                id: "msgGridpanel",
                region: 'center',
                xtype: 'gridpanel',
                multiSelect: true,
                viewConfig: {
                    plugins: {
                        ptype: 'gridviewdragdrop',
                        dragGroup: 'firstGridDDGroup',
                        dropGroup: 'secondGridDDGroup'
                    },
                    listeners: {
                        drop: function (node, data, dropRec, dropPosition) {
                            console.log("drop");
                        }
                    }
                },
                store: messageStore,
                columnLines: true,
                features: [filters],
                autoScroll: true,
                columns: [
                    { text: 'IMEI', width: 150, sortable: true, dataIndex: 'Imei', hidden: true },
                    { text: 'Version', width: 100, sortable: true, dataIndex: 'Version', hidden: true },
                    { text: 'SEQ', width: 50, sortable: true, dataIndex: 'Seq' },
                    { text: 'HeaderTime(UTC)', width: 150, sortable: true, dataIndex: 'HeaderTime', renderer: Ext.util.Format.dateRenderer('d/m/Y H:i:s') },
                    { text: 'Message Type', width: 200, sortable: true, dataIndex: 'MessageType', renderer: renderMsgColor, filter: true },
                    { text: 'Jney ID', width: 50, sortable: true, dataIndex: 'JouneyId' },
                    { text: 'CreatedTime(Local)', width: 150, sortable: true, dataIndex: 'CreatedTime', renderer: Ext.util.Format.dateRenderer('d/m/Y H:i:s') },
                    { text: 'PacketId', width: 250, sortable: true, dataIndex: 'PacketId', hidden: true,
                        renderer: function (val) {
                            return '<input type="text" value="' + val + '" style="width: 220px;" />';
                        }
                    }
                ],
                tbar: [
                  { xtype: 'button', text: 'Remove', iconCls: 'icon-delete',
                      handler: function (btn, evt) {
                          var grid = btn.up().up();
                          var selected = grid.getSelectionModel().getLastSelected();
                          if (selected) {
                              Ext.MessageBox.confirm('Confirm', 'Are you sure you want to remove message?',
                              function (btn) {
                                  if (btn === 'yes') {
                                      var packetId = selected.get('PacketId');
                                      $.ajax({
                                          type: "POST",
                                          cache: false,
                                          data: "{'packetId': '" + packetId + "'}",
                                          url: '@Url.Action("RemovePacket", "Devices")',
                                          contentType: "application/json; charset=utf-8",
                                          dataType: "json",
                                          success: function (result) {
                                              if (result.success) {
                                                  messageStore.load();
                                              } else {
                                                  alert("Error remove packet: " + result.message);
                                              }
                                          },
                                          error: function (xhr, ajaxOptions, thrownError) {
                                              alert(xhr.status + " " + thrownError);
                                          }
                                      });
                                  }
                              });
                          }

                          //var actLogs = '@Url.Action("Logs", "Devices", new { imei = "_imei" })';
                          //                          var logsAction = window.LogsAction + '?imei=' + imei;
                          //                          window.open(logsAction);
                      }
                  }
                  , { xtype: 'button', text: 'Simulation Script Builder', iconCls: 'icon-upload',
                      handler: function (btn, evt) {
                          var window = new DeviceCommunication.view.device.SimulationScriptWindow();
                          window.show();
                      }
                  }, { xtype: 'button', text: 'Send Again', iconCls: 'icon-add',
                      handler: function (btn, evt) {
                          var grid = btn.up().up();
                          var selected = grid.getSelectionModel().getLastSelected();
                          if (selected) {
                              Ext.MessageBox.confirm('Confirm', 'Are you sure you want to send message again?',
                              function (btn) {
                                  if (btn === 'yes') {
                                      var packetId = selected.get('PacketId');
                                      $.ajax({
                                          type: "POST",
                                          cache: false,
                                          data: "{'packetId': '" + packetId + "'}",
                                          url: '@Url.Action("SendAgain", "Devices")',
                                          contentType: "application/json; charset=utf-8",
                                          dataType: "json",
                                          success: function (result) {
                                              if (result.success) {
                                                  messageStore.load();
                                              } else {
                                                  alert("Error remove packet: " + result.message);
                                              }
                                          },
                                          error: function (xhr, ajaxOptions, thrownError) {
                                              alert(xhr.status + " " + thrownError);
                                          }
                                      });
                                  }
                              });
                          }

                      }
                  }
                ],
                bbar: Ext.create('Ext.PagingToolbar', {
                    store: messageStore,
                    displayInfo: true,
                    displayMsg: 'Displaying Messages {0} - {1} of {2}',
                    emptyMsg: "No devices to display"
                }),
                listeners: {
                    selectionchange: function (model, records) {
                        if (records[0]) {
                            var packetId = records[0].get('PacketId');
                            var url = '@Url.Action("MessageCode", "Devices", null, null)';
                            url += "?packetId=" + packetId;
                            var msgDetail = Ext.getCmp('gridCodeDetail');

                            msgDetail.store.proxy.url = url;
                            msgDetail.store.load();
                        }
                    },
                    itemdblclick: function (dataview, record, item, index, e) {
                        var msgType = record.get('MessageType');
                        var packetId = record.get('PacketId');
                        var headerTime = record.get('HeaderTime');

                        if (msgType == "ObdDtcCodesAlert") {
                            var url = '@Url.Action("GetObdDtcCodesStatus", "Devices", null, null)';
                            var data = { packetId: packetId };

                            Ext.MessageBox.show({
                                msg: 'Please wait. I am querying ObdDtcCodesAlert.',
                                width: 300
                            });

                            $.ajax({
                                type: "POST",
                                cache: false,
                                data: Ext.encode(data),
                                //async: false,
                                url: url,
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (result) {
                                    Ext.MessageBox.hide();
                                    //alert(result.data.Misfire);
                                    var obdDtcCodesAlertWindow = Ext.create('DeviceCommunication.view.device.ObdDtcCodesAlertWindow', { animateTarget: item });

                                    obdDtcCodesAlertWindow.title = "ObdDtcCodesAlert [HeaderTime: " + headerTime + "]";
                                    obdDtcCodesAlertWindow.view(result.data);
                                    obdDtcCodesAlertWindow.show();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    Ext.MessageBox.hide();
                                    alert(xhr.status + " " + thrownError);
                                }
                            }); //end ajax
                        } //end if ObdDtcCodesAlert
                        else if (msgType == "HistogramBinRawData") {

                            var url = '@Url.Action("GetHistogramBinRawData", "Devices", null, null)';
                            var data = { packetId: packetId };

                            //console.log("itemdblclick -> HistogramBinRawData");

                            Ext.MessageBox.show({
                                msg: 'Please wait. I am querying HistogramBinRawData.', width: 300
                            });

                            $.ajax({
                                type: "POST",
                                cache: false,
                                data: Ext.encode(data),
                                //async: false,
                                url: url,
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (result) {
                                    //console.log(Ext.encode(result.data));
                                    Ext.MessageBox.hide();

                                    var window = Ext.create('DeviceCommunication.view.device.HistogramBinRawDataWindow', { animateTarget: item });

                                    window.view(result.header, result.data, result.data2, result.data3, result.info);
                                    window.show();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    Ext.MessageBox.hide();
                                    alert(xhr.status + " " + thrownError);
                                }
                            }); //end ajax

                        } //end if HistogramBinRawData
                        else if (msgType == "ImpactAlert1Array") {
                            var url = '@Url.Action("GetImactArray1", "Devices", null, null)';
                            var data = { packetId: packetId };

                            Ext.MessageBox.show({
                                msg: 'Please wait. I am querying ImpactAlert1Array.', width: 300
                            });

                            $.ajax({
                                type: "POST",
                                cache: false,
                                data: Ext.encode(data),
                                //async: false,
                                url: url,
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (result) {
                                    //console.log(Ext.encode(result.data));
                                    Ext.MessageBox.hide();

                                    var window = Ext.create('DeviceCommunication.view.device.ImpactAlert1Window', { animateTarget: item });

                                    window.view(result.data, result.deltaVAdj);
                                    window.show();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    Ext.MessageBox.hide();
                                    alert(xhr.status + " " + thrownError);
                                }
                            }); //end ajax

                        } //end if ImpactAlert1Array
                        else if (msgType == "ImpactAlert2Array") {
                            var url = '@Url.Action("GetImactArray2", "Devices", null, null)';
                            var data = { packetId: packetId };

                            Ext.MessageBox.show({
                                msg: 'Please wait. I am querying ImpactAlert2Array.', width: 300
                            });

                            $.ajax({
                                type: "POST",
                                cache: false,
                                data: Ext.encode(data),
                                //async: false,
                                url: url,
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function (result) {
                                    //console.log(Ext.encode(result.data));
                                    Ext.MessageBox.hide();

                                    var window = Ext.create('DeviceCommunication.view.device.ImpactAlert2Window', { animateTarget: item });

                                    window.view(result.data);
                                    window.show();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    Ext.MessageBox.hide();
                                    alert(xhr.status + " " + thrownError);
                                }
                            }); //end ajax
                        } //end if ImpactAlert2Array
                        else if (msgType == "ObdCore") {
                            var url = '@Url.Action("GetObdSupport", "Devices", null, null)';
                            var data = { packetId: packetId };

                            Ext.MessageBox.show({
                                msg: 'Please wait. I am querying ObdCore.', width: 300
                            });

                            $.ajax({
                                type: "POST", cache: false, data: Ext.encode(data),
                                //async: false,
                                url: url,
                                contentType: "application/json; charset=utf-8", dataType: "json",
                                success: function (result) {
                                    //console.log(Ext.encode(result.obdSupport));
                                    Ext.MessageBox.hide();

                                    var window = Ext.create('DeviceCommunication.view.device.ObdWindow', { animateTarget: item });

                                    window.view(result.obdSupport);
                                    window.show();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    Ext.MessageBox.hide();
                                    alert(xhr.status + " " + thrownError);
                                }
                            }); //end ajax
                        } //end if ObdCore
                        else if (msgType == "GpsAwakeArray") {
                            var url = '@Url.Action("GpsAwakeArray", "Devices", null, null)';
                            var data = { packetId: packetId };
                            Ext.MessageBox.show({
                                msg: 'Please wait. I am querying GpsAwake.', width: 300
                            });
                            $.ajax({
                                type: "POST", cache: false, data: Ext.encode(data),
                                //async: false,
                                url: url,
                                contentType: "application/json; charset=utf-8", dataType: "json",
                                success: function (result) {
                                    //console.log(Ext.encode(result.obdSupport));
                                    Ext.MessageBox.hide();

                                    var window = Ext.create('DeviceCommunication.view.device.GpsAwakeArrayWindow', { animateTarget: item });

                                    window.view(result);
                                    window.show();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    Ext.MessageBox.hide();
                                    alert(xhr.status + " " + thrownError);
                                }
                            }); //end ajax

                        } //end if GpsAwakeArray
                    } //end itemdblclick
                }
            }
        );

        //var mapwin;

        items.push({
            region: 'east',
            width: 600,
            minWidth: 500,
            maxWidth: 700,
            //collapsible: true,
            //autoScroll: true,
            defaults: {
                split: true,
                frame: false
            },
            layout: {
                type: 'border',
                padding: 5
            },
            items: [
                { title: 'Message Details',
                    id: 'gridCodeDetail',
                    region: 'center',
                    xtype: 'gridpanel',
                    store: storeMsgCode,
                    autoScroll: false,
                    columnLines: true,
                    layout: 'fit',
                    disableSelection: true,
                    invalidateScrollerOnRefresh: true,
                    columns: [
                        { text: 'Name', sortable: false, dataIndex: 'Name', width: 200 },
                        { text: 'Value', sortable: false, dataIndex: 'Value', width: 150, renderer: renderMsgColor },
                        { text: 'Description', sortable: false, dataIndex: 'Description', width: 300 }
                    ]
                    //                    ,
                    //                    buttons: [
                    //                        { text: 'Send Again',
                    //                            id: 'send-again-action',
                    //                            disabled: true,
                    //                            handler: function () {
                    //                                alert("Send Again");
                    //                            }
                    //                        }
                    //                    ]
                },
                {
                    xtype: 'tabpanel',
                    region: 'south',
                    layout: 'fit',
                    height: 330,
                    items: [{
                        xtype: 'gmappanel',
                        title: '2D Map',
                        id: 'google-map',
                        zoomLevel: 16,
                        iconCls: 'icon-tabs',
                        center: new google.maps.LatLng(13.730157, 100.580547)
                    },
                    {
                        id: 'panorama-map',
                        xtype: 'panel',
                        title: '3D Map',
                        html: "<div id='map_panorama' style='height: 100%;width: auto;'/>",
                        iconCls: 'icon-tabs',
                        listeners: {
                            activate: function () {
                                _map_panorama = new google.maps.StreetViewPanorama($("#map_panorama").get(0));
                                _map_panorama.setPov({ heading: parseInt(_heading), pitch: 10, zoom: 1 });
                                _map_panorama.setPosition(_latlng);
                            }
                        }
                    }]
                }
            ]
        });


        var main = Ext.create('Ext.container.Viewport', {
            layout: {
                type: 'border',
                padding: 5
            },
            defaults: {
                split: true,
                frame: false
            },
            items: items
        });

        //        Ext.getCmp('msgGridpanel').getView().getRowClass = function (row, index) {
        //            var msgType = row.get('MessageType');
        //            if (msgType == "GeoPoint") {
        //                return "geopoint";
        //            }
        //        };
    });
</script>
}