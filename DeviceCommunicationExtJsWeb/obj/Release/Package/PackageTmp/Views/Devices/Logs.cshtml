@{
    ViewBag.Title = "Device Communication LOGS";
}

<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false">  </script>

<script src="@Url.Content("~/app/model/Log.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/MessageCode.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/BinRawData.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/ImpactAlert1.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/ImpactAlert2.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/model/GpsAwake.js")" type="text/javascript"></script>

<script src="@Url.Content("~/app/view/device/ObdDtcCodesAlertWindow.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/HistogramBinRawDataWindow.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/ImpactAlert1Window.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/ImpactAlert2Window.js")" type="text/javascript"></script>

<script src="@Url.Content("~/app/view/device/ObdWindow.js")" type="text/javascript"></script>
<script src="@Url.Content("~/app/view/device/GpsAwakeArrayWindow.js")" type="text/javascript"></script>

@section script{
<script type="text/javascript">
    Ext.Loader.setConfig({ enabled: true });
    Ext.Loader.setPath('Ext.ux', '@Url.Content("~/Scripts/extjs/ux")');

    Ext.require([
        'Ext.ux.GMapPanel'
    ]);

    Ext.onReady(function () {
        var carIcon = '@Url.Content("~/Content/map-icons-collection-2.0/icons/car.png")';

        var direction_up_icon = '@Url.Content("~/Content/heading/direction_up.png")';
        var direction_upright_icon = '@Url.Content("~/Content/heading/direction_upright.png")';
        var direction_right_icon = '@Url.Content("~/Content/heading/direction_right.png")';
        var direction_upleft_icon = '@Url.Content("~/Content/heading/direction_upleft.png")';
        var direction_downright_icon = '@Url.Content("~/Content/heading/direction_downright.png")';
        var direction_left_icon = '@Url.Content("~/Content/heading/direction_left.png")';
        var direction_down_icon = '@Url.Content("~/Content/heading/direction_down.png")';
        var direction_downleft_icon = '@Url.Content("~/Content/heading/direction_downleft.png")';

        Ext.QuickTips.init();
        var logsStore = Ext.create('Ext.data.JsonStore', {
            model: 'DeviceCommunication.model.Log',
            autoLoad: true,
            pageSize: 200,
            proxy: {
                type: 'ajax',
                api: {
                    read: '@Url.Action("LogsPaging", "Devices", new { imei = ViewBag.Imei})'
                },
                reader: {
                    type: 'json',
                    root: 'data',
                    totalProperty: 'total'
                },
                listeners: {
                    exception: function (proxy, response, operation) {
                        Ext.Msg.show({
                            title: response.statusText,
                            msg: Ext.decode(response.responseText).message,
                            buttons: Ext.Msg.OK,
                            icon: Ext.window.MessageBox.ERROR
                        });
                    }
                }
            }
        });

        //        var filters = {
        //            ftype: 'filters',
        //            encode: false,
        //            local: false,
        //            filters: [
        //                 { type: 'string', dataIndex: 'MessageType' }
        //            ]
        //        };

        var mark = null;
        var cycle = null;
        var rec = null;

        var _latlng = null;
        var _heading = null;

        var storeMsgCode = new Ext.data.JsonStore({
            model: 'DeviceCommunication.model.MessageCode',
            proxy: {
                type: 'ajax',
                reader: {type: 'json', root: 'data'}
            },
            listeners: {
                'load': function (store, records, options) {
                    var googleMap = Ext.getCmp('google-map');
                    if (cycle != null) cycle.setMap(null);
                    if (rec != null) rec.setMap(null);
                    if (mark != null) mark.setMap(null);

                    if (records.length > 0) {
                        var record_1 = records[0];
                        var name = record_1.get('Name');
                        var val = record_1.get('Value');
                        if (name === "MessageType") {
                            if (val === "GeoPoint" ||
                            val === "TowingAlert" ||
                            val === "EngineStartStopAlert" ||
                            val === "IdlingAlert" ||
                            val === "GpsFixAlert" ||
                            val === "GeoFenceAlert") {

                                if (val === "GeoFenceAlert") {
                                    for (var i = 1; i < records.length; i++) {
                                        var record = records[i];
                                        var name = record.get('Name');
                                        var val = record.get('Value');
                                        if (name === "GeofenceId") {
                                            var geofenceId = val;
                                            if (geofenceId !== 0) {
                                                var msgGrid = Ext.getCmp('logGridpanel');
                                                var selectedRows = msgGrid.getSelectionModel().getSelection();
                                                var packetId = selectedRows[0].get('PacketId');

                                                var host = '@Url.Action("GetGeoFence", "Devices")';

                                                $.ajax({
                                                    type: "POST",
                                                    cache: false,
                                                    data: "{'packetId': '" + packetId + "'}",
                                                    //async: false,
                                                    url: host,
                                                    contentType: "application/json; charset=utf-8",
                                                    dataType: "json",
                                                    success: function (result) {
                                                        var geoFence = result.data;

                                                        var imei = geoFence.Imei;
                                                        var geofenceId = geoFence.GeoFenceId;
                                                        var description = geoFence.Description;
                                                        var geoFenceRadius = geoFence.GeoFenceRadius;

                                                        var geoFenceLatitude = geoFence.GeoFenceLatitude;
                                                        var geoFenceLongitude = geoFence.GeoFenceLongitude;
                                                        var geoFenceLatitudeUpperRight = geoFence.GeoFenceLatitudeUpperRight;
                                                        var geoFenceLongitudeUpperRight = geoFence.GeoFenceLongitudeUpperRight;

                                                        var center = new google.maps.LatLng(geoFenceLatitude, geoFenceLongitude);
                                                        var upperRight = new google.maps.LatLng(geoFenceLatitudeUpperRight, geoFenceLongitudeUpperRight);

                                                        if (geoFenceRadius === 0) {

                                                            var recOptions = {
                                                                bounds: new google.maps.LatLngBounds(center, upperRight),
                                                                strokeColor: "#FF0000",
                                                                strokeOpacity: 0.8,
                                                                map: googleMap.getMap()
                                                            };

                                                            rec = new google.maps.Rectangle(recOptions);

                                                        } else {//Cycle
                                                            var cycleOptions = {
                                                                center: center,
                                                                radius: geoFenceRadius,
                                                                strokeWeight: 2,
                                                                strokeColor: "#FF0000",
                                                                strokeOpacity: 0.8,
                                                                map: googleMap.getMap()
                                                            };
                                                            //console.log("Cycle:" + geoFenceRadius);
                                                            cycle = new google.maps.Circle(cycleOptions);
                                                        }

                                                        //alert(imei + ", " + geofenceId + ", " + description);
                                                    },
                                                    error: function (xhr, ajaxOptions, thrownError) {
                                                        alert(xhr.status + " " + thrownError);
                                                        setTimeout(updateLastKnownLocation, 3000);
                                                    }
                                                });
                                            }
                                        }
                                    }
                                }

                                var lat = 0.0;
                                var lng = 0.0;
                                var heading = 0;

                                for (var i = 1; i < records.length; i++) {
                                    var record = records[i];
                                    var name = record.get('Name');
                                    var val = record.get('Value');
                                    if (name === "Latitude" && val !== 'NA') {
                                        lat = val;
                                    }
                                    else if (name === "Longitude" && val !== 'NA') {
                                        lng = val;
                                    } 
                                    else if (name === "Heading") {
                                        heading = val;
                                    }
                                }

                                var latlng = new google.maps.LatLng(lat, lng);

                                mark = new google.maps.Marker(
                                    {
                                        position: latlng,
                                        title: "(" + lat + ", " + lng + ")",
                                        map: googleMap.getMap(),
                                        icon: carIcon
                                    }
                                );

                                if (heading >= 338 || heading < 23) {
                                    mark.icon = direction_up_icon;
                                }
                                else if (23 <= heading && heading < 68) {
                                    mark.icon = direction_upright_icon;
                                }
                                else if (68 <= heading && heading < 113) {
                                    mark.icon = direction_right_icon;
                                }
                                else if (113 <= heading && heading < 158) {
                                    mark.icon = direction_downright_icon;
                                }
                                else if (158 <= heading && heading < 203) {
                                    mark.icon = direction_down_icon;
                                }
                                else if (203 <= heading && heading < 248) {
                                    mark.icon = direction_downleft_icon;
                                }
                                else if (248 <= heading && heading < 293) {
                                    mark.icon = direction_left_icon;
                                }
                                else if (293 <= heading && heading < 338) {
                                    mark.icon = direction_upleft_icon;
                                }

                                mark.size = new google.maps.Size(32, 40);

                                googleMap.getMap().panTo(latlng);

                                _latlng = latlng;
                                _heading = heading;
                                try
                                {
                                    _map_panorama = new google.maps.StreetViewPanorama($("#map_panorama").get(0));
                                    _map_panorama.setPov({
                                        heading: parseInt(_heading), pitch: 10, zoom: 1
                                    });
                                    _map_panorama.setPosition(_latlng);
                                } catch (err) { }
                            }
                        }
                    }
                }
            }
        });

        var items = [];
        items.push({
            id: 'logGridpanel',
            region: 'center',
            title: 'Logs [IMEI: ' + '@ViewBag.Imei' + ']',
            xtype: 'gridpanel',
            //features: [filters],
            autoScroll: true,
            columns: [
                { dataIndex: 'TimeGenerated', text: 'Event Time(Local)', width: 120, sortable: true, renderer: Ext.util.Format.dateRenderer('d/m/Y H:i:s') },
                { dataIndex: 'MessageType', text: 'MSG Type', sortable: true, width: 150, renderer: renderMsgColor },
                { dataIndex: 'Seq', text: 'SEQ', sortable: true, width: 40 },
                { dataIndex: 'HeaderTime', text: 'Header Time(UTC)', sortable: true, width: 140 },
                { dataIndex: 'AckCompleted', text: 'ACK SEQ', sortable: true, width: 130 },
                { dataIndex: 'RequestCommand', text: 'REQ CMD', sortable: true },
                { dataIndex: 'ResponseMsgType', text: 'RESP MSG Type', sortable: true, width: 150 },
                { dataIndex: 'RequestId', text: 'REQ ID', sortable: true },
                { dataIndex: 'StatusCode', text: 'Status Code', sortable: true },
                { dataIndex: 'WriteResponseElapsed', text: 'RESP Elapsed(ms)', sortable: true },
                { dataIndex: 'ResponseSeq', text: 'RESP SEQ', sortable: true },
                { dataIndex: 'ServerId', text: 'Server', sortable: true, width: 40 },
                { dataIndex: 'ServerTime', text: 'Server Time(UTC RESP)', sortable: true, width: 140 },
                { dataIndex: 'TimesOfRequstCommand', text: 'Times Of REQ CMD', sortable: true },
                { dataIndex: 'DeviceAddress', text: 'Device IP', sortable: true, width: 150 },
                { dataIndex: 'Encryption', text: 'AES', sortable: true, width: 40 },
                { dataIndex: 'PacketId', dataIndex: 'PacketId', hidden: true },
                { dataIndex: 'ErrorMessage', text: 'Error MSG', sortable: true, width: 300 }
            ],
            bbar: Ext.create('Ext.PagingToolbar', {
                store: logsStore
                , displayInfo: true
                , displayMsg: 'Displaying Logs {0} - {1} of {2}'
                , emptyMsg: "No Log to display"
            }),
            listeners: {
                selectionchange: function (model, records) {
                    if (records[0]) {
                        var packetId = records[0].get("PacketId");
                        var url = '@Url.Action("MessageCode", "Devices", null, null)';
                        url += "?packetId=" + packetId;
                        var msgDetail = Ext.getCmp('gridCodeDetail');

                        msgDetail.store.proxy.url = url;
                        msgDetail.store.load();
                        msgDetail.determineScrollbars();

                    } //end if
                }, //end selectionchange
                itemdblclick: function (dataview, record, item, index, e) {
                    var msgType = record.get('MessageType');
                    var packetId = record.get('PacketId');
                    var headerTime = record.get('HeaderTime');

                    if (msgType == "ObdDtcCodesAlert") {
                        var url = '@Url.Action("GetObdDtcCodesStatus", "Devices", null, null)';
                        var data = { packetId: packetId };

                        Ext.MessageBox.show({
                            msg: 'Please wait. I am querying ObdDtcCodesAlert.',
                            width: 300
                        });

                        $.ajax({
                            type: "POST",
                            cache: false,
                            data: Ext.encode(data),
                            //async: false,
                            url: url,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (result) {
                                Ext.MessageBox.hide();
                                //alert(result.data.Misfire);
                                var obdDtcCodesAlertWindow = Ext.create('DeviceCommunication.view.device.ObdDtcCodesAlertWindow', { animateTarget: item });
                                
                                obdDtcCodesAlertWindow.title = "ObdDtcCodesAlert [HeaderTime: " + headerTime + "]";
                                obdDtcCodesAlertWindow.view(result.data);
                                obdDtcCodesAlertWindow.show();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                Ext.MessageBox.hide();
                                alert(xhr.status + " " + thrownError);
                            }
                        }); //end ajax
                    } //end ObdDtcCodesAlert
                    else if (msgType == "HistogramBinRawData") {
                        var url = '@Url.Action("GetHistogramBinRawData", "Devices", null, null)';
                        var data = { packetId: packetId };

                        //console.log("itemdblclick -> HistogramBinRawData");

                        Ext.MessageBox.show({
                            msg: 'Please wait. I am querying HistogramBinRawData.',
                            width: 300
                        });

                        $.ajax({
                            type: "POST",
                            cache: false,
                            data: Ext.encode(data),
                            //async: false,
                            url: url,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (result) {
                                //console.log(Ext.encode(result.data));
                                Ext.MessageBox.hide();

                                var window = Ext.create('DeviceCommunication.view.device.HistogramBinRawDataWindow', { animateTarget: item });
                                
                                window.view(result.header, result.data, result.data2, result.data3, result.info);
                                window.show();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                Ext.MessageBox.hide();
                                alert(xhr.status + " " + thrownError);
                            }
                        }); //end ajax
                    } //end HistogramBinRawData
                    else if (msgType == "ImpactAlert1Array") {
                        var url = '@Url.Action("GetImactArray1", "Devices", null, null)';
                        var data = { packetId: packetId };

                        Ext.MessageBox.show({
                            msg: 'Please wait. I am querying ImpactAlert1Array.',
                            width: 300
                        });

                        $.ajax({
                            type: "POST",
                            cache: false,
                            data: Ext.encode(data),
                            //async: false,
                            url: url,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (result) {
                                //console.log(Ext.encode(result.data));
                                Ext.MessageBox.hide();

                                var window = Ext.create('DeviceCommunication.view.device.ImpactAlert1Window', { animateTarget: item });
                                
                                window.view(result.data, result.deltaVAdj);
                                window.show();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                Ext.MessageBox.hide();
                                alert(xhr.status + " " + thrownError);
                            }
                        }); //end ajax
                    } // end 
                    else if (msgType == "ObdCore") {
                        var url = '@Url.Action("GetObdSupport", "Devices", null, null)';
                        var data = { packetId: packetId };

                        Ext.MessageBox.show({
                            msg: 'Please wait. I am querying ObdCore.', width: 300
                        });

                        $.ajax({
                            type: "POST", cache: false, data: Ext.encode(data),
                            //async: false,
                            url: url,
                            contentType: "application/json; charset=utf-8", dataType: "json",
                            success: function (result) {
                                //console.log(Ext.encode(result.obdSupport));
                                Ext.MessageBox.hide();

                                var window = Ext.create('DeviceCommunication.view.device.ObdWindow', { animateTarget: item });
                                
                                window.view(result.obdSupport);
                                window.show();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                Ext.MessageBox.hide();
                                alert(xhr.status + " " + thrownError);
                            }
                        }); //end ajax
                    } //end if ObdCore
                    else if (msgType == "GpsAwakeArray") {
                        var url = '@Url.Action("GpsAwakeArray", "Devices", null, null)';
                        var data = { packetId: packetId };
                        Ext.MessageBox.show({
                            msg: 'Please wait. I am querying GpsAwake.', width: 300
                        });
                        $.ajax({
                            type: "POST", cache: false, data: Ext.encode(data),
                            //async: false,
                            url: url,
                            contentType: "application/json; charset=utf-8", dataType: "json",
                            success: function (result) {
                                //console.log(Ext.encode(result.obdSupport));
                                Ext.MessageBox.hide();

                                var window = Ext.create('DeviceCommunication.view.device.GpsAwakeArrayWindow', { animateTarget: item });
                                
                                window.view(result);
                                window.show();
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                Ext.MessageBox.hide();
                                alert(xhr.status + " " + thrownError);
                            }
                        }); //end ajax

                    } //end if GpsAwakeArray
                } //end itemdblclick
            },
            store: logsStore
        });

        items.push({
            region: "south",
            title: "Console",
            height: 50,
            maxHeight: 150,
            minHeight: 50,
            layout: 'fit',
            collapsible: true,
            items: [
                {
                    id: 'logger',
                    xtype: 'textareafield',
                    autoScroll: true,
                    readOnly: true
                }
            ]
        });

        items.push({
            region: "east",
            //collapsible: true,
            width: 400,
            minWidth: 300,
            maxWidth: 600,
            //autoScroll: true,
            defaults: {
                split: true,
                frame: false
            },
            layout: {
                type: 'border',
                padding: 5
            },
            items: [{
                title: 'Message Details',
                id: 'gridCodeDetail',
                xtype: 'gridpanel',
                store: storeMsgCode,
                columnLines: true,
                autoScroll: false,
                region: "center",
                disableSelection: true,
                invalidateScrollerOnRefresh: true,
                columns: [
                        { text: 'Name', sortable: false, dataIndex: 'Name', width: 150 },
                        { text: 'Value', sortable: false, dataIndex: 'Value', width: 150, renderer: renderMsgColor },
                        { text: 'Description', sortable: false, dataIndex: 'Description', width: 250 }
                ]
            }, 
            {
                xtype: 'tabpanel',
                region: 'south',
                layout: 'fit',
                height: 330,
                items: [{
                    xtype: 'gmappanel',
                    title: '2D Map',
                    id: 'google-map',
                    zoomLevel: 16,
                    iconCls: 'icon-tabs',
                    center: new google.maps.LatLng(13.730157, 100.580547)
                },
                {
                    id: 'panorama-map',
                    xtype: 'panel',
                    title: '3D Map',
                    html: "<div id='map_panorama' style='height: 100%;width: auto;'/>",
                    iconCls: 'icon-tabs',
                    listeners: {
                        activate: function () {
                            _map_panorama = new google.maps.StreetViewPanorama($("#map_panorama").get(0));
                            _map_panorama.setPov({
                                heading: parseInt(_heading), pitch: 10, zoom: 1
                            });
                            _map_panorama.setPosition(_latlng);
                        }
                    }
                }]
            }
            ]
        });

        var main = Ext.create('Ext.container.Viewport', {
            layout: {
                type: 'border',
                padding: 5
            },
            defaults: {
                split: true,
                frame: false
            },
            items: items
        });

        var logger = Ext.getCmp('logger');
        logger.setValue("Logger start...");
    });
</script>