//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeviceCommunicationExtJsWeb.DeviceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.DeviceService.DeployOtaStateResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.DeviceService.LocationsForSpeedCheck))]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool CompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage OtaHeaderRequestMessageResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint RequestIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Completed {
            get {
                return this.CompletedField;
            }
            set {
                if ((this.CompletedField.Equals(value) != true)) {
                    this.CompletedField = value;
                    this.RaisePropertyChanged("Completed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage OtaHeaderRequestMessageResult {
            get {
                return this.OtaHeaderRequestMessageResultField;
            }
            set {
                if ((object.ReferenceEquals(this.OtaHeaderRequestMessageResultField, value) != true)) {
                    this.OtaHeaderRequestMessageResultField = value;
                    this.RaisePropertyChanged("OtaHeaderRequestMessageResult");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint RequestId {
            get {
                return this.RequestIdField;
            }
            set {
                if ((this.RequestIdField.Equals(value) != true)) {
                    this.RequestIdField = value;
                    this.RaisePropertyChanged("RequestId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeployOtaStateResult", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class DeployOtaStateResult : DeviceCommunicationExtJsWeb.DeviceService.OperationResult {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationsForSpeedCheck", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class LocationsForSpeedCheck : DeviceCommunicationExtJsWeb.DeviceService.OperationResult {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDrivingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] LocationsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDriving {
            get {
                return this.IsDrivingField;
            }
            set {
                if ((this.IsDrivingField.Equals(value) != true)) {
                    this.IsDrivingField = value;
                    this.RaisePropertyChanged("IsDriving");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] Locations {
            get {
                return this.LocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationsField, value) != true)) {
                    this.LocationsField = value;
                    this.RaisePropertyChanged("Locations");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeoPointDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class GeoPointDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short AltitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceSnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FromMessageJsonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort GroundSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HavDistanceMetersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort HeadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImeiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MapIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte NumberOfSatellitesUsedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort UniqueJournyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UtcTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleStateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Altitude {
            get {
                return this.AltitudeField;
            }
            set {
                if ((this.AltitudeField.Equals(value) != true)) {
                    this.AltitudeField = value;
                    this.RaisePropertyChanged("Altitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceSn {
            get {
                return this.DeviceSnField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceSnField, value) != true)) {
                    this.DeviceSnField = value;
                    this.RaisePropertyChanged("DeviceSn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromMessage {
            get {
                return this.FromMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FromMessageField, value) != true)) {
                    this.FromMessageField = value;
                    this.RaisePropertyChanged("FromMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromMessageJson {
            get {
                return this.FromMessageJsonField;
            }
            set {
                if ((object.ReferenceEquals(this.FromMessageJsonField, value) != true)) {
                    this.FromMessageJsonField = value;
                    this.RaisePropertyChanged("FromMessageJson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort GroundSpeed {
            get {
                return this.GroundSpeedField;
            }
            set {
                if ((this.GroundSpeedField.Equals(value) != true)) {
                    this.GroundSpeedField = value;
                    this.RaisePropertyChanged("GroundSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HavDistanceMeters {
            get {
                return this.HavDistanceMetersField;
            }
            set {
                if ((this.HavDistanceMetersField.Equals(value) != true)) {
                    this.HavDistanceMetersField = value;
                    this.RaisePropertyChanged("HavDistanceMeters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Heading {
            get {
                return this.HeadingField;
            }
            set {
                if ((this.HeadingField.Equals(value) != true)) {
                    this.HeadingField = value;
                    this.RaisePropertyChanged("Heading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imei {
            get {
                return this.ImeiField;
            }
            set {
                if ((object.ReferenceEquals(this.ImeiField, value) != true)) {
                    this.ImeiField = value;
                    this.RaisePropertyChanged("Imei");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MapId {
            get {
                return this.MapIdField;
            }
            set {
                if ((this.MapIdField.Equals(value) != true)) {
                    this.MapIdField = value;
                    this.RaisePropertyChanged("MapId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte NumberOfSatellitesUsed {
            get {
                return this.NumberOfSatellitesUsedField;
            }
            set {
                if ((this.NumberOfSatellitesUsedField.Equals(value) != true)) {
                    this.NumberOfSatellitesUsedField = value;
                    this.RaisePropertyChanged("NumberOfSatellitesUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ToDate {
            get {
                return this.ToDateField;
            }
            set {
                if ((this.ToDateField.Equals(value) != true)) {
                    this.ToDateField = value;
                    this.RaisePropertyChanged("ToDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort UniqueJournyId {
            get {
                return this.UniqueJournyIdField;
            }
            set {
                if ((this.UniqueJournyIdField.Equals(value) != true)) {
                    this.UniqueJournyIdField = value;
                    this.RaisePropertyChanged("UniqueJournyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UtcTime {
            get {
                return this.UtcTimeField;
            }
            set {
                if ((this.UtcTimeField.Equals(value) != true)) {
                    this.UtcTimeField = value;
                    this.RaisePropertyChanged("UtcTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleState {
            get {
                return this.VehicleStateField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleStateField, value) != true)) {
                    this.VehicleStateField = value;
                    this.RaisePropertyChanged("VehicleState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReqConfAndCmd", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class ReqConfAndCmd : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageJsonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReqDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint ReqIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageJson {
            get {
                return this.MessageJsonField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageJsonField, value) != true)) {
                    this.MessageJsonField = value;
                    this.RaisePropertyChanged("MessageJson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReqDate {
            get {
                return this.ReqDateField;
            }
            set {
                if ((this.ReqDateField.Equals(value) != true)) {
                    this.ReqDateField = value;
                    this.RaisePropertyChanged("ReqDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint ReqID {
            get {
                return this.ReqIDField;
            }
            set {
                if ((this.ReqIDField.Equals(value) != true)) {
                    this.ReqIDField = value;
                    this.RaisePropertyChanged("ReqID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class DeviceDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceSnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IccidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImeiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImsiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastestAccessIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint LastestAccessTcpPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastestAccessTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint LastestAccessUdpPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ProblemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VehicleStateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceSn {
            get {
                return this.DeviceSnField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceSnField, value) != true)) {
                    this.DeviceSnField = value;
                    this.RaisePropertyChanged("DeviceSn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Iccid {
            get {
                return this.IccidField;
            }
            set {
                if ((object.ReferenceEquals(this.IccidField, value) != true)) {
                    this.IccidField = value;
                    this.RaisePropertyChanged("Iccid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imei {
            get {
                return this.ImeiField;
            }
            set {
                if ((object.ReferenceEquals(this.ImeiField, value) != true)) {
                    this.ImeiField = value;
                    this.RaisePropertyChanged("Imei");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imsi {
            get {
                return this.ImsiField;
            }
            set {
                if ((object.ReferenceEquals(this.ImsiField, value) != true)) {
                    this.ImsiField = value;
                    this.RaisePropertyChanged("Imsi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastestAccessIp {
            get {
                return this.LastestAccessIpField;
            }
            set {
                if ((object.ReferenceEquals(this.LastestAccessIpField, value) != true)) {
                    this.LastestAccessIpField = value;
                    this.RaisePropertyChanged("LastestAccessIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint LastestAccessTcpPort {
            get {
                return this.LastestAccessTcpPortField;
            }
            set {
                if ((this.LastestAccessTcpPortField.Equals(value) != true)) {
                    this.LastestAccessTcpPortField = value;
                    this.RaisePropertyChanged("LastestAccessTcpPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastestAccessTime {
            get {
                return this.LastestAccessTimeField;
            }
            set {
                if ((this.LastestAccessTimeField.Equals(value) != true)) {
                    this.LastestAccessTimeField = value;
                    this.RaisePropertyChanged("LastestAccessTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint LastestAccessUdpPort {
            get {
                return this.LastestAccessUdpPortField;
            }
            set {
                if ((this.LastestAccessUdpPortField.Equals(value) != true)) {
                    this.LastestAccessUdpPortField = value;
                    this.RaisePropertyChanged("LastestAccessUdpPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((object.ReferenceEquals(this.ModeField, value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Problems {
            get {
                return this.ProblemsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProblemsField, value) != true)) {
                    this.ProblemsField = value;
                    this.RaisePropertyChanged("Problems");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServerID {
            get {
                return this.ServerIDField;
            }
            set {
                if ((this.ServerIDField.Equals(value) != true)) {
                    this.ServerIDField = value;
                    this.RaisePropertyChanged("ServerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VehicleState {
            get {
                return this.VehicleStateField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleStateField, value) != true)) {
                    this.VehicleStateField = value;
                    this.RaisePropertyChanged("VehicleState");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JourneyGpsFixAlertDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class JourneyGpsFixAlertDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CarPass.Domains.Communications.Messages.GpsFixAlertMessage[] GpsFixAlertListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort JourneyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartJourneyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StopJourneyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CarPass.Domains.Communications.Messages.GpsFixAlertMessage[] GpsFixAlertList {
            get {
                return this.GpsFixAlertListField;
            }
            set {
                if ((object.ReferenceEquals(this.GpsFixAlertListField, value) != true)) {
                    this.GpsFixAlertListField = value;
                    this.RaisePropertyChanged("GpsFixAlertList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort JourneyId {
            get {
                return this.JourneyIdField;
            }
            set {
                if ((this.JourneyIdField.Equals(value) != true)) {
                    this.JourneyIdField = value;
                    this.RaisePropertyChanged("JourneyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartJourney {
            get {
                return this.StartJourneyField;
            }
            set {
                if ((this.StartJourneyField.Equals(value) != true)) {
                    this.StartJourneyField = value;
                    this.RaisePropertyChanged("StartJourney");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StopJourney {
            get {
                return this.StopJourneyField;
            }
            set {
                if ((this.StopJourneyField.Equals(value) != true)) {
                    this.StopJourneyField = value;
                    this.RaisePropertyChanged("StopJourney");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HealthInfoDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class HealthInfoDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.DeviceBattery DeviceBatteryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.DeviceHealth DeviceHealthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.DeviceProfile DeviceProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime HeaderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.KeyHealth KeyHealthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.MemInfo MemInfoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceBattery DeviceBattery {
            get {
                return this.DeviceBatteryField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceBatteryField, value) != true)) {
                    this.DeviceBatteryField = value;
                    this.RaisePropertyChanged("DeviceBattery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceHealth DeviceHealth {
            get {
                return this.DeviceHealthField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceHealthField, value) != true)) {
                    this.DeviceHealthField = value;
                    this.RaisePropertyChanged("DeviceHealth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceProfile DeviceProfile {
            get {
                return this.DeviceProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceProfileField, value) != true)) {
                    this.DeviceProfileField = value;
                    this.RaisePropertyChanged("DeviceProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime HeaderTime {
            get {
                return this.HeaderTimeField;
            }
            set {
                if ((this.HeaderTimeField.Equals(value) != true)) {
                    this.HeaderTimeField = value;
                    this.RaisePropertyChanged("HeaderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.KeyHealth KeyHealth {
            get {
                return this.KeyHealthField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyHealthField, value) != true)) {
                    this.KeyHealthField = value;
                    this.RaisePropertyChanged("KeyHealth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.MemInfo MemInfo {
            get {
                return this.MemInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.MemInfoField, value) != true)) {
                    this.MemInfoField = value;
                    this.RaisePropertyChanged("MemInfo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceBattery", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class DeviceBattery : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BatteryCellCapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BatteryCurrentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort BatteryCurrentAccumulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BatteryVoltageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InitialBatteryVoltageReadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double NewBatteryCapacityLearningField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BatteryCellCapacity {
            get {
                return this.BatteryCellCapacityField;
            }
            set {
                if ((this.BatteryCellCapacityField.Equals(value) != true)) {
                    this.BatteryCellCapacityField = value;
                    this.RaisePropertyChanged("BatteryCellCapacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BatteryCurrent {
            get {
                return this.BatteryCurrentField;
            }
            set {
                if ((this.BatteryCurrentField.Equals(value) != true)) {
                    this.BatteryCurrentField = value;
                    this.RaisePropertyChanged("BatteryCurrent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort BatteryCurrentAccumulation {
            get {
                return this.BatteryCurrentAccumulationField;
            }
            set {
                if ((this.BatteryCurrentAccumulationField.Equals(value) != true)) {
                    this.BatteryCurrentAccumulationField = value;
                    this.RaisePropertyChanged("BatteryCurrentAccumulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BatteryVoltage {
            get {
                return this.BatteryVoltageField;
            }
            set {
                if ((this.BatteryVoltageField.Equals(value) != true)) {
                    this.BatteryVoltageField = value;
                    this.RaisePropertyChanged("BatteryVoltage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InitialBatteryVoltageReading {
            get {
                return this.InitialBatteryVoltageReadingField;
            }
            set {
                if ((this.InitialBatteryVoltageReadingField.Equals(value) != true)) {
                    this.InitialBatteryVoltageReadingField = value;
                    this.RaisePropertyChanged("InitialBatteryVoltageReading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NewBatteryCapacityLearning {
            get {
                return this.NewBatteryCapacityLearningField;
            }
            set {
                if ((this.NewBatteryCapacityLearningField.Equals(value) != true)) {
                    this.NewBatteryCapacityLearningField = value;
                    this.RaisePropertyChanged("NewBatteryCapacityLearning");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceHealth", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class DeviceHealth : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyAccelerometerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyFuelGaugeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyGPSDeviceBatteryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyGPSModuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyGSMModuleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyNandFlashMemoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyOBDChipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyPowerSwitchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyRFIDChipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthySIMCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthySerialPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HealthyUSBPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool Healthy_MicroControllerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyAccelerometer {
            get {
                return this.HealthyAccelerometerField;
            }
            set {
                if ((this.HealthyAccelerometerField.Equals(value) != true)) {
                    this.HealthyAccelerometerField = value;
                    this.RaisePropertyChanged("HealthyAccelerometer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyFuelGauge {
            get {
                return this.HealthyFuelGaugeField;
            }
            set {
                if ((this.HealthyFuelGaugeField.Equals(value) != true)) {
                    this.HealthyFuelGaugeField = value;
                    this.RaisePropertyChanged("HealthyFuelGauge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyGPSDeviceBattery {
            get {
                return this.HealthyGPSDeviceBatteryField;
            }
            set {
                if ((this.HealthyGPSDeviceBatteryField.Equals(value) != true)) {
                    this.HealthyGPSDeviceBatteryField = value;
                    this.RaisePropertyChanged("HealthyGPSDeviceBattery");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyGPSModule {
            get {
                return this.HealthyGPSModuleField;
            }
            set {
                if ((this.HealthyGPSModuleField.Equals(value) != true)) {
                    this.HealthyGPSModuleField = value;
                    this.RaisePropertyChanged("HealthyGPSModule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyGSMModule {
            get {
                return this.HealthyGSMModuleField;
            }
            set {
                if ((this.HealthyGSMModuleField.Equals(value) != true)) {
                    this.HealthyGSMModuleField = value;
                    this.RaisePropertyChanged("HealthyGSMModule");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyNandFlashMemory {
            get {
                return this.HealthyNandFlashMemoryField;
            }
            set {
                if ((this.HealthyNandFlashMemoryField.Equals(value) != true)) {
                    this.HealthyNandFlashMemoryField = value;
                    this.RaisePropertyChanged("HealthyNandFlashMemory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyOBDChip {
            get {
                return this.HealthyOBDChipField;
            }
            set {
                if ((this.HealthyOBDChipField.Equals(value) != true)) {
                    this.HealthyOBDChipField = value;
                    this.RaisePropertyChanged("HealthyOBDChip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyPowerSwitch {
            get {
                return this.HealthyPowerSwitchField;
            }
            set {
                if ((this.HealthyPowerSwitchField.Equals(value) != true)) {
                    this.HealthyPowerSwitchField = value;
                    this.RaisePropertyChanged("HealthyPowerSwitch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyRFIDChip {
            get {
                return this.HealthyRFIDChipField;
            }
            set {
                if ((this.HealthyRFIDChipField.Equals(value) != true)) {
                    this.HealthyRFIDChipField = value;
                    this.RaisePropertyChanged("HealthyRFIDChip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthySIMCard {
            get {
                return this.HealthySIMCardField;
            }
            set {
                if ((this.HealthySIMCardField.Equals(value) != true)) {
                    this.HealthySIMCardField = value;
                    this.RaisePropertyChanged("HealthySIMCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthySerialPort {
            get {
                return this.HealthySerialPortField;
            }
            set {
                if ((this.HealthySerialPortField.Equals(value) != true)) {
                    this.HealthySerialPortField = value;
                    this.RaisePropertyChanged("HealthySerialPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HealthyUSBPort {
            get {
                return this.HealthyUSBPortField;
            }
            set {
                if ((this.HealthyUSBPortField.Equals(value) != true)) {
                    this.HealthyUSBPortField = value;
                    this.RaisePropertyChanged("HealthyUSBPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Healthy_MicroController {
            get {
                return this.Healthy_MicroControllerField;
            }
            set {
                if ((this.Healthy_MicroControllerField.Equals(value) != true)) {
                    this.Healthy_MicroControllerField = value;
                    this.RaisePropertyChanged("Healthy_MicroController");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DeviceProfile", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class DeviceProfile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ICCIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong IMSIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PowerSourceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte Profile_FirmwareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ShortcutOBDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ICCID {
            get {
                return this.ICCIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ICCIDField, value) != true)) {
                    this.ICCIDField = value;
                    this.RaisePropertyChanged("ICCID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong IMSI {
            get {
                return this.IMSIField;
            }
            set {
                if ((this.IMSIField.Equals(value) != true)) {
                    this.IMSIField = value;
                    this.RaisePropertyChanged("IMSI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PowerSourceType {
            get {
                return this.PowerSourceTypeField;
            }
            set {
                if ((this.PowerSourceTypeField.Equals(value) != true)) {
                    this.PowerSourceTypeField = value;
                    this.RaisePropertyChanged("PowerSourceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Profile_Firmware {
            get {
                return this.Profile_FirmwareField;
            }
            set {
                if ((this.Profile_FirmwareField.Equals(value) != true)) {
                    this.Profile_FirmwareField = value;
                    this.RaisePropertyChanged("Profile_Firmware");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ShortcutOBD {
            get {
                return this.ShortcutOBDField;
            }
            set {
                if ((this.ShortcutOBDField.Equals(value) != true)) {
                    this.ShortcutOBDField = value;
                    this.RaisePropertyChanged("ShortcutOBD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyHealth", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class KeyHealth : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double KeyfobBatteryVoltageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte KeyfobFirmwareVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong KeyfobIDWhichPairedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool KeyfobPairingStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool KeyfobProximityDetectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short KeyfobRSSIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LowKeyfobBatteryVoltageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double KeyfobBatteryVoltage {
            get {
                return this.KeyfobBatteryVoltageField;
            }
            set {
                if ((this.KeyfobBatteryVoltageField.Equals(value) != true)) {
                    this.KeyfobBatteryVoltageField = value;
                    this.RaisePropertyChanged("KeyfobBatteryVoltage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte KeyfobFirmwareVersion {
            get {
                return this.KeyfobFirmwareVersionField;
            }
            set {
                if ((this.KeyfobFirmwareVersionField.Equals(value) != true)) {
                    this.KeyfobFirmwareVersionField = value;
                    this.RaisePropertyChanged("KeyfobFirmwareVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong KeyfobIDWhichPaired {
            get {
                return this.KeyfobIDWhichPairedField;
            }
            set {
                if ((this.KeyfobIDWhichPairedField.Equals(value) != true)) {
                    this.KeyfobIDWhichPairedField = value;
                    this.RaisePropertyChanged("KeyfobIDWhichPaired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeyfobPairingStatus {
            get {
                return this.KeyfobPairingStatusField;
            }
            set {
                if ((this.KeyfobPairingStatusField.Equals(value) != true)) {
                    this.KeyfobPairingStatusField = value;
                    this.RaisePropertyChanged("KeyfobPairingStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool KeyfobProximityDetected {
            get {
                return this.KeyfobProximityDetectedField;
            }
            set {
                if ((this.KeyfobProximityDetectedField.Equals(value) != true)) {
                    this.KeyfobProximityDetectedField = value;
                    this.RaisePropertyChanged("KeyfobProximityDetected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short KeyfobRSSI {
            get {
                return this.KeyfobRSSIField;
            }
            set {
                if ((this.KeyfobRSSIField.Equals(value) != true)) {
                    this.KeyfobRSSIField = value;
                    this.RaisePropertyChanged("KeyfobRSSI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LowKeyfobBatteryVoltage {
            get {
                return this.LowKeyfobBatteryVoltageField;
            }
            set {
                if ((this.LowKeyfobBatteryVoltageField.Equals(value) != true)) {
                    this.LowKeyfobBatteryVoltageField = value;
                    this.RaisePropertyChanged("LowKeyfobBatteryVoltage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemInfo", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class MemInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint FlashMemoryAvailableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint NumberOfAlertInNandMemoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint NumberOfGeopointInNandMemoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint NumberOfImpactInNandMemoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint FlashMemoryAvailable {
            get {
                return this.FlashMemoryAvailableField;
            }
            set {
                if ((this.FlashMemoryAvailableField.Equals(value) != true)) {
                    this.FlashMemoryAvailableField = value;
                    this.RaisePropertyChanged("FlashMemoryAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint NumberOfAlertInNandMemory {
            get {
                return this.NumberOfAlertInNandMemoryField;
            }
            set {
                if ((this.NumberOfAlertInNandMemoryField.Equals(value) != true)) {
                    this.NumberOfAlertInNandMemoryField = value;
                    this.RaisePropertyChanged("NumberOfAlertInNandMemory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint NumberOfGeopointInNandMemory {
            get {
                return this.NumberOfGeopointInNandMemoryField;
            }
            set {
                if ((this.NumberOfGeopointInNandMemoryField.Equals(value) != true)) {
                    this.NumberOfGeopointInNandMemoryField = value;
                    this.RaisePropertyChanged("NumberOfGeopointInNandMemory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint NumberOfImpactInNandMemory {
            get {
                return this.NumberOfImpactInNandMemoryField;
            }
            set {
                if ((this.NumberOfImpactInNandMemoryField.Equals(value) != true)) {
                    this.NumberOfImpactInNandMemoryField = value;
                    this.RaisePropertyChanged("NumberOfImpactInNandMemory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObdCoreDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class ObdCoreDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint Bitwisex01Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint Bitwisex04Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DtcCodesPendingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DtcCodesStoredField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort FuelSystemStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte FuelTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GeopointField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte OBDStandardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte ObdSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte OxygenSensorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort PIDx21DistanceTravelledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort PIDx31DistanceTravelledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte PercentFuelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PidSupport00Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PidSupport20Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint PidSupport40Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort RPMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VINField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Bitwisex01 {
            get {
                return this.Bitwisex01Field;
            }
            set {
                if ((this.Bitwisex01Field.Equals(value) != true)) {
                    this.Bitwisex01Field = value;
                    this.RaisePropertyChanged("Bitwisex01");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Bitwisex04 {
            get {
                return this.Bitwisex04Field;
            }
            set {
                if ((this.Bitwisex04Field.Equals(value) != true)) {
                    this.Bitwisex04Field = value;
                    this.RaisePropertyChanged("Bitwisex04");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DtcCodesPending {
            get {
                return this.DtcCodesPendingField;
            }
            set {
                if ((object.ReferenceEquals(this.DtcCodesPendingField, value) != true)) {
                    this.DtcCodesPendingField = value;
                    this.RaisePropertyChanged("DtcCodesPending");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DtcCodesStored {
            get {
                return this.DtcCodesStoredField;
            }
            set {
                if ((object.ReferenceEquals(this.DtcCodesStoredField, value) != true)) {
                    this.DtcCodesStoredField = value;
                    this.RaisePropertyChanged("DtcCodesStored");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort FuelSystemStatus {
            get {
                return this.FuelSystemStatusField;
            }
            set {
                if ((this.FuelSystemStatusField.Equals(value) != true)) {
                    this.FuelSystemStatusField = value;
                    this.RaisePropertyChanged("FuelSystemStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte FuelType {
            get {
                return this.FuelTypeField;
            }
            set {
                if ((this.FuelTypeField.Equals(value) != true)) {
                    this.FuelTypeField = value;
                    this.RaisePropertyChanged("FuelType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto Geopoint {
            get {
                return this.GeopointField;
            }
            set {
                if ((object.ReferenceEquals(this.GeopointField, value) != true)) {
                    this.GeopointField = value;
                    this.RaisePropertyChanged("Geopoint");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte OBDStandard {
            get {
                return this.OBDStandardField;
            }
            set {
                if ((this.OBDStandardField.Equals(value) != true)) {
                    this.OBDStandardField = value;
                    this.RaisePropertyChanged("OBDStandard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte ObdSpeed {
            get {
                return this.ObdSpeedField;
            }
            set {
                if ((this.ObdSpeedField.Equals(value) != true)) {
                    this.ObdSpeedField = value;
                    this.RaisePropertyChanged("ObdSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte OxygenSensor {
            get {
                return this.OxygenSensorField;
            }
            set {
                if ((this.OxygenSensorField.Equals(value) != true)) {
                    this.OxygenSensorField = value;
                    this.RaisePropertyChanged("OxygenSensor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort PIDx21DistanceTravelled {
            get {
                return this.PIDx21DistanceTravelledField;
            }
            set {
                if ((this.PIDx21DistanceTravelledField.Equals(value) != true)) {
                    this.PIDx21DistanceTravelledField = value;
                    this.RaisePropertyChanged("PIDx21DistanceTravelled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort PIDx31DistanceTravelled {
            get {
                return this.PIDx31DistanceTravelledField;
            }
            set {
                if ((this.PIDx31DistanceTravelledField.Equals(value) != true)) {
                    this.PIDx31DistanceTravelledField = value;
                    this.RaisePropertyChanged("PIDx31DistanceTravelled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte PercentFuel {
            get {
                return this.PercentFuelField;
            }
            set {
                if ((this.PercentFuelField.Equals(value) != true)) {
                    this.PercentFuelField = value;
                    this.RaisePropertyChanged("PercentFuel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PidSupport00 {
            get {
                return this.PidSupport00Field;
            }
            set {
                if ((this.PidSupport00Field.Equals(value) != true)) {
                    this.PidSupport00Field = value;
                    this.RaisePropertyChanged("PidSupport00");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PidSupport20 {
            get {
                return this.PidSupport20Field;
            }
            set {
                if ((this.PidSupport20Field.Equals(value) != true)) {
                    this.PidSupport20Field = value;
                    this.RaisePropertyChanged("PidSupport20");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint PidSupport40 {
            get {
                return this.PidSupport40Field;
            }
            set {
                if ((this.PidSupport40Field.Equals(value) != true)) {
                    this.PidSupport40Field = value;
                    this.RaisePropertyChanged("PidSupport40");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort RPM {
            get {
                return this.RPMField;
            }
            set {
                if ((this.RPMField.Equals(value) != true)) {
                    this.RPMField = value;
                    this.RaisePropertyChanged("RPM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VIN {
            get {
                return this.VINField;
            }
            set {
                if ((object.ReferenceEquals(this.VINField, value) != true)) {
                    this.VINField = value;
                    this.RaisePropertyChanged("VIN");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JourneySummaryDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class JourneySummaryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrNumberReadingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrStandardDeviationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrivenHarversineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrivenObdSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrivenPidx31Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrivenRealOdoPidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal DrivingCumulativeDulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DummyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal IdlingCumulativeDulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short JourneyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal MissingGpsSignalDulationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TotalJourneyDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TowedHarversineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TowedObdSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TowedPidx31Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TowedRealOdoPidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal TowingCumulativeDulationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrNumberReadings {
            get {
                return this.DrNumberReadingsField;
            }
            set {
                if ((this.DrNumberReadingsField.Equals(value) != true)) {
                    this.DrNumberReadingsField = value;
                    this.RaisePropertyChanged("DrNumberReadings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrStandardDeviation {
            get {
                return this.DrStandardDeviationField;
            }
            set {
                if ((this.DrStandardDeviationField.Equals(value) != true)) {
                    this.DrStandardDeviationField = value;
                    this.RaisePropertyChanged("DrStandardDeviation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrValue {
            get {
                return this.DrValueField;
            }
            set {
                if ((this.DrValueField.Equals(value) != true)) {
                    this.DrValueField = value;
                    this.RaisePropertyChanged("DrValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrivenHarversine {
            get {
                return this.DrivenHarversineField;
            }
            set {
                if ((this.DrivenHarversineField.Equals(value) != true)) {
                    this.DrivenHarversineField = value;
                    this.RaisePropertyChanged("DrivenHarversine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrivenObdSpeed {
            get {
                return this.DrivenObdSpeedField;
            }
            set {
                if ((this.DrivenObdSpeedField.Equals(value) != true)) {
                    this.DrivenObdSpeedField = value;
                    this.RaisePropertyChanged("DrivenObdSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrivenPidx31 {
            get {
                return this.DrivenPidx31Field;
            }
            set {
                if ((this.DrivenPidx31Field.Equals(value) != true)) {
                    this.DrivenPidx31Field = value;
                    this.RaisePropertyChanged("DrivenPidx31");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrivenRealOdoPid {
            get {
                return this.DrivenRealOdoPidField;
            }
            set {
                if ((this.DrivenRealOdoPidField.Equals(value) != true)) {
                    this.DrivenRealOdoPidField = value;
                    this.RaisePropertyChanged("DrivenRealOdoPid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal DrivingCumulativeDulation {
            get {
                return this.DrivingCumulativeDulationField;
            }
            set {
                if ((this.DrivingCumulativeDulationField.Equals(value) != true)) {
                    this.DrivingCumulativeDulationField = value;
                    this.RaisePropertyChanged("DrivingCumulativeDulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Dummy {
            get {
                return this.DummyField;
            }
            set {
                if ((this.DummyField.Equals(value) != true)) {
                    this.DummyField = value;
                    this.RaisePropertyChanged("Dummy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal IdlingCumulativeDulation {
            get {
                return this.IdlingCumulativeDulationField;
            }
            set {
                if ((this.IdlingCumulativeDulationField.Equals(value) != true)) {
                    this.IdlingCumulativeDulationField = value;
                    this.RaisePropertyChanged("IdlingCumulativeDulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short JourneyId {
            get {
                return this.JourneyIdField;
            }
            set {
                if ((this.JourneyIdField.Equals(value) != true)) {
                    this.JourneyIdField = value;
                    this.RaisePropertyChanged("JourneyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MissingGpsSignalDulation {
            get {
                return this.MissingGpsSignalDulationField;
            }
            set {
                if ((this.MissingGpsSignalDulationField.Equals(value) != true)) {
                    this.MissingGpsSignalDulationField = value;
                    this.RaisePropertyChanged("MissingGpsSignalDulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TotalJourneyDuration {
            get {
                return this.TotalJourneyDurationField;
            }
            set {
                if ((this.TotalJourneyDurationField.Equals(value) != true)) {
                    this.TotalJourneyDurationField = value;
                    this.RaisePropertyChanged("TotalJourneyDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TowedHarversine {
            get {
                return this.TowedHarversineField;
            }
            set {
                if ((this.TowedHarversineField.Equals(value) != true)) {
                    this.TowedHarversineField = value;
                    this.RaisePropertyChanged("TowedHarversine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TowedObdSpeed {
            get {
                return this.TowedObdSpeedField;
            }
            set {
                if ((this.TowedObdSpeedField.Equals(value) != true)) {
                    this.TowedObdSpeedField = value;
                    this.RaisePropertyChanged("TowedObdSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TowedPidx31 {
            get {
                return this.TowedPidx31Field;
            }
            set {
                if ((this.TowedPidx31Field.Equals(value) != true)) {
                    this.TowedPidx31Field = value;
                    this.RaisePropertyChanged("TowedPidx31");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TowedRealOdoPid {
            get {
                return this.TowedRealOdoPidField;
            }
            set {
                if ((this.TowedRealOdoPidField.Equals(value) != true)) {
                    this.TowedRealOdoPidField = value;
                    this.RaisePropertyChanged("TowedRealOdoPid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal TowingCumulativeDulation {
            get {
                return this.TowingCumulativeDulationField;
            }
            set {
                if ((this.TowingCumulativeDulationField.Equals(value) != true)) {
                    this.TowingCumulativeDulationField = value;
                    this.RaisePropertyChanged("TowingCumulativeDulation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EngineStartStopDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class EngineStartStopDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte EngineTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GeopointField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte EngineType {
            get {
                return this.EngineTypeField;
            }
            set {
                if ((this.EngineTypeField.Equals(value) != true)) {
                    this.EngineTypeField = value;
                    this.RaisePropertyChanged("EngineType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto Geopoint {
            get {
                return this.GeopointField;
            }
            set {
                if ((object.ReferenceEquals(this.GeopointField, value) != true)) {
                    this.GeopointField = value;
                    this.RaisePropertyChanged("Geopoint");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MileageDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class MileageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HavDistanceMetersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImeiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HavDistanceMeters {
            get {
                return this.HavDistanceMetersField;
            }
            set {
                if ((this.HavDistanceMetersField.Equals(value) != true)) {
                    this.HavDistanceMetersField = value;
                    this.RaisePropertyChanged("HavDistanceMeters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imei {
            get {
                return this.ImeiField;
            }
            set {
                if ((object.ReferenceEquals(this.ImeiField, value) != true)) {
                    this.ImeiField = value;
                    this.RaisePropertyChanged("Imei");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ToDate {
            get {
                return this.ToDateField;
            }
            set {
                if ((this.ToDateField.Equals(value) != true)) {
                    this.ToDateField = value;
                    this.RaisePropertyChanged("ToDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SpeedCheckDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class SpeedCheckDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AvgSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] SeqOfGeopointListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalDistanceMetersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AvgSpeed {
            get {
                return this.AvgSpeedField;
            }
            set {
                if ((this.AvgSpeedField.Equals(value) != true)) {
                    this.AvgSpeedField = value;
                    this.RaisePropertyChanged("AvgSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] SeqOfGeopointList {
            get {
                return this.SeqOfGeopointListField;
            }
            set {
                if ((object.ReferenceEquals(this.SeqOfGeopointListField, value) != true)) {
                    this.SeqOfGeopointListField = value;
                    this.RaisePropertyChanged("SeqOfGeopointList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalDistanceMeters {
            get {
                return this.TotalDistanceMetersField;
            }
            set {
                if ((this.TotalDistanceMetersField.Equals(value) != true)) {
                    this.TotalDistanceMetersField = value;
                    this.RaisePropertyChanged("TotalDistanceMeters");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GeoPointHistoryDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class GeoPointHistoryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GeoPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TotalDrivingDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TotalIdlingDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TotalJourneyDurationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GeoPoints {
            get {
                return this.GeoPointsField;
            }
            set {
                if ((object.ReferenceEquals(this.GeoPointsField, value) != true)) {
                    this.GeoPointsField = value;
                    this.RaisePropertyChanged("GeoPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TotalDrivingDuration {
            get {
                return this.TotalDrivingDurationField;
            }
            set {
                if ((this.TotalDrivingDurationField.Equals(value) != true)) {
                    this.TotalDrivingDurationField = value;
                    this.RaisePropertyChanged("TotalDrivingDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TotalIdlingDuration {
            get {
                return this.TotalIdlingDurationField;
            }
            set {
                if ((this.TotalIdlingDurationField.Equals(value) != true)) {
                    this.TotalIdlingDurationField = value;
                    this.RaisePropertyChanged("TotalIdlingDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan TotalJourneyDuration {
            get {
                return this.TotalJourneyDurationField;
            }
            set {
                if ((this.TotalJourneyDurationField.Equals(value) != true)) {
                    this.TotalJourneyDurationField = value;
                    this.RaisePropertyChanged("TotalJourneyDuration");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JourneyDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class JourneyDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AvgSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CumulativeDistanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan CumulativeDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double DistanceTravelledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GeopointLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan IdlingDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan JourneyDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort JourneyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SpeedZeroMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SpeedZeroMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto StartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartJourneyUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto StopField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StopJourneyUtcField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AvgSpeed {
            get {
                return this.AvgSpeedField;
            }
            set {
                if ((this.AvgSpeedField.Equals(value) != true)) {
                    this.AvgSpeedField = value;
                    this.RaisePropertyChanged("AvgSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CumulativeDistance {
            get {
                return this.CumulativeDistanceField;
            }
            set {
                if ((this.CumulativeDistanceField.Equals(value) != true)) {
                    this.CumulativeDistanceField = value;
                    this.RaisePropertyChanged("CumulativeDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan CumulativeDuration {
            get {
                return this.CumulativeDurationField;
            }
            set {
                if ((this.CumulativeDurationField.Equals(value) != true)) {
                    this.CumulativeDurationField = value;
                    this.RaisePropertyChanged("CumulativeDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DistanceTravelled {
            get {
                return this.DistanceTravelledField;
            }
            set {
                if ((this.DistanceTravelledField.Equals(value) != true)) {
                    this.DistanceTravelledField = value;
                    this.RaisePropertyChanged("DistanceTravelled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GeopointLength {
            get {
                return this.GeopointLengthField;
            }
            set {
                if ((this.GeopointLengthField.Equals(value) != true)) {
                    this.GeopointLengthField = value;
                    this.RaisePropertyChanged("GeopointLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan IdlingDuration {
            get {
                return this.IdlingDurationField;
            }
            set {
                if ((this.IdlingDurationField.Equals(value) != true)) {
                    this.IdlingDurationField = value;
                    this.RaisePropertyChanged("IdlingDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan JourneyDuration {
            get {
                return this.JourneyDurationField;
            }
            set {
                if ((this.JourneyDurationField.Equals(value) != true)) {
                    this.JourneyDurationField = value;
                    this.RaisePropertyChanged("JourneyDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort JourneyId {
            get {
                return this.JourneyIdField;
            }
            set {
                if ((this.JourneyIdField.Equals(value) != true)) {
                    this.JourneyIdField = value;
                    this.RaisePropertyChanged("JourneyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MaxSpeed {
            get {
                return this.MaxSpeedField;
            }
            set {
                if ((this.MaxSpeedField.Equals(value) != true)) {
                    this.MaxSpeedField = value;
                    this.RaisePropertyChanged("MaxSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SpeedZeroMax {
            get {
                return this.SpeedZeroMaxField;
            }
            set {
                if ((this.SpeedZeroMaxField.Equals(value) != true)) {
                    this.SpeedZeroMaxField = value;
                    this.RaisePropertyChanged("SpeedZeroMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SpeedZeroMin {
            get {
                return this.SpeedZeroMinField;
            }
            set {
                if ((this.SpeedZeroMinField.Equals(value) != true)) {
                    this.SpeedZeroMinField = value;
                    this.RaisePropertyChanged("SpeedZeroMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto Start {
            get {
                return this.StartField;
            }
            set {
                if ((object.ReferenceEquals(this.StartField, value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartJourneyUtc {
            get {
                return this.StartJourneyUtcField;
            }
            set {
                if ((this.StartJourneyUtcField.Equals(value) != true)) {
                    this.StartJourneyUtcField = value;
                    this.RaisePropertyChanged("StartJourneyUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto Stop {
            get {
                return this.StopField;
            }
            set {
                if ((object.ReferenceEquals(this.StopField, value) != true)) {
                    this.StopField = value;
                    this.RaisePropertyChanged("Stop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StopJourneyUtc {
            get {
                return this.StopJourneyUtcField;
            }
            set {
                if ((this.StopJourneyUtcField.Equals(value) != true)) {
                    this.StopJourneyUtcField = value;
                    this.RaisePropertyChanged("StopJourneyUtc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TotalDistanceJourneyDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class TotalDistanceJourneyDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DrivingDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan IdlingDurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort JourneyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartGeoPointHeaderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartJourneyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StopGeoPointHeaderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StopJourneyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TotalDistanceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan DrivingDuration {
            get {
                return this.DrivingDurationField;
            }
            set {
                if ((this.DrivingDurationField.Equals(value) != true)) {
                    this.DrivingDurationField = value;
                    this.RaisePropertyChanged("DrivingDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan IdlingDuration {
            get {
                return this.IdlingDurationField;
            }
            set {
                if ((this.IdlingDurationField.Equals(value) != true)) {
                    this.IdlingDurationField = value;
                    this.RaisePropertyChanged("IdlingDuration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort JourneyId {
            get {
                return this.JourneyIdField;
            }
            set {
                if ((this.JourneyIdField.Equals(value) != true)) {
                    this.JourneyIdField = value;
                    this.RaisePropertyChanged("JourneyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartGeoPointHeaderTime {
            get {
                return this.StartGeoPointHeaderTimeField;
            }
            set {
                if ((this.StartGeoPointHeaderTimeField.Equals(value) != true)) {
                    this.StartGeoPointHeaderTimeField = value;
                    this.RaisePropertyChanged("StartGeoPointHeaderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartJourney {
            get {
                return this.StartJourneyField;
            }
            set {
                if ((this.StartJourneyField.Equals(value) != true)) {
                    this.StartJourneyField = value;
                    this.RaisePropertyChanged("StartJourney");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StopGeoPointHeaderTime {
            get {
                return this.StopGeoPointHeaderTimeField;
            }
            set {
                if ((this.StopGeoPointHeaderTimeField.Equals(value) != true)) {
                    this.StopGeoPointHeaderTimeField = value;
                    this.RaisePropertyChanged("StopGeoPointHeaderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StopJourney {
            get {
                return this.StopJourneyField;
            }
            set {
                if ((this.StopJourneyField.Equals(value) != true)) {
                    this.StopJourneyField = value;
                    this.RaisePropertyChanged("StopJourney");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalDistance {
            get {
                return this.TotalDistanceField;
            }
            set {
                if ((this.TotalDistanceField.Equals(value) != true)) {
                    this.TotalDistanceField = value;
                    this.RaisePropertyChanged("TotalDistance");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleUsageInfoDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class VehicleUsageInfoDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceSnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DrivingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan IdlingTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan ParkedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan[] SplitDrivingTimesBySpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UsageFromTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UsageToTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceSn {
            get {
                return this.DeviceSnField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceSnField, value) != true)) {
                    this.DeviceSnField = value;
                    this.RaisePropertyChanged("DeviceSn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan DrivingTime {
            get {
                return this.DrivingTimeField;
            }
            set {
                if ((this.DrivingTimeField.Equals(value) != true)) {
                    this.DrivingTimeField = value;
                    this.RaisePropertyChanged("DrivingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan IdlingTime {
            get {
                return this.IdlingTimeField;
            }
            set {
                if ((this.IdlingTimeField.Equals(value) != true)) {
                    this.IdlingTimeField = value;
                    this.RaisePropertyChanged("IdlingTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan ParkedTime {
            get {
                return this.ParkedTimeField;
            }
            set {
                if ((this.ParkedTimeField.Equals(value) != true)) {
                    this.ParkedTimeField = value;
                    this.RaisePropertyChanged("ParkedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan[] SplitDrivingTimesBySpeed {
            get {
                return this.SplitDrivingTimesBySpeedField;
            }
            set {
                if ((object.ReferenceEquals(this.SplitDrivingTimesBySpeedField, value) != true)) {
                    this.SplitDrivingTimesBySpeedField = value;
                    this.RaisePropertyChanged("SplitDrivingTimesBySpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UsageFromTime {
            get {
                return this.UsageFromTimeField;
            }
            set {
                if ((this.UsageFromTimeField.Equals(value) != true)) {
                    this.UsageFromTimeField = value;
                    this.RaisePropertyChanged("UsageFromTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UsageToTime {
            get {
                return this.UsageToTimeField;
            }
            set {
                if ((this.UsageToTimeField.Equals(value) != true)) {
                    this.UsageToTimeField = value;
                    this.RaisePropertyChanged("UsageToTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerLossAlert", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class PowerLossAlert : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.PowerLoss PowerLossFlagField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((this.MessageIDField.Equals(value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.PowerLoss PowerLossFlag {
            get {
                return this.PowerLossFlagField;
            }
            set {
                if ((this.PowerLossFlagField.Equals(value) != true)) {
                    this.PowerLossFlagField = value;
                    this.RaisePropertyChanged("PowerLossFlag");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerLoss", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    public enum PowerLoss : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Loss = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Powered = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CummulativeDuration", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class CummulativeDuration : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.DeviceService.CummulativeType CummulativeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JourneyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MissingGPSSignalDurationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.DeviceService.CummulativeType Cummulative {
            get {
                return this.CummulativeField;
            }
            set {
                if ((this.CummulativeField.Equals(value) != true)) {
                    this.CummulativeField = value;
                    this.RaisePropertyChanged("Cummulative");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JourneyID {
            get {
                return this.JourneyIDField;
            }
            set {
                if ((object.ReferenceEquals(this.JourneyIDField, value) != true)) {
                    this.JourneyIDField = value;
                    this.RaisePropertyChanged("JourneyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageID {
            get {
                return this.MessageIDField;
            }
            set {
                if ((this.MessageIDField.Equals(value) != true)) {
                    this.MessageIDField = value;
                    this.RaisePropertyChanged("MessageID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MissingGPSSignalDuration {
            get {
                return this.MissingGPSSignalDurationField;
            }
            set {
                if ((this.MissingGPSSignalDurationField.Equals(value) != true)) {
                    this.MissingGPSSignalDurationField = value;
                    this.RaisePropertyChanged("MissingGPSSignalDuration");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CummulativeType", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    public enum CummulativeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _3kms = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        _10kms = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeviceService.IDeviceCommunicationService")]
    public interface IDeviceCommunicationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployOtaHeaderRequest", ReplyAction="http://tempuri.org/IDeployService/DeployOtaHeaderRequestResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployOtaHeaderRequest(string deviceSn, CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage otaHeaderRequest, byte[] firmeware);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployOtaHeaderRequestFromFilePath", ReplyAction="http://tempuri.org/IDeployService/DeployOtaHeaderRequestFromFilePathResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployOtaHeaderRequestFromFilePath(string deviceSn, CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage otaHeaderRequest, string otaTempFilePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployOtaHeaderRequestFromGridFs", ReplyAction="http://tempuri.org/IDeployService/DeployOtaHeaderRequestFromGridFsResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployOtaHeaderRequestFromGridFs(string deviceSn, CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage otaHeaderRequest, string databaseName, string otaMd5);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/GetDeployOtaState", ReplyAction="http://tempuri.org/IDeployService/GetDeployOtaStateResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeployOtaStateResult GetDeployOtaState(string deviceSn, System.DateTime beginRequestUpdateOtaDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/Deploy", ReplyAction="http://tempuri.org/IDeployService/DeployResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult Deploy(string deviceSnOrImei, uint requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployAlgorithmConf", ReplyAction="http://tempuri.org/IDeployService/DeployAlgorithmConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployAlgorithmConf(string deviceSn, CarPass.Domains.Communications.Messages.AlgorithmConfMessage newAlgoConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployHistogramsConf", ReplyAction="http://tempuri.org/IDeployService/DeployHistogramsConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployHistogramsConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsConfMessage newHistogramsConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployHistogramsBinConf", ReplyAction="http://tempuri.org/IDeployService/DeployHistogramsBinConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployHistogramsBinConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsBinConfMessage newHistogramsBinConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployTowingConf", ReplyAction="http://tempuri.org/IDeployService/DeployTowingConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployTowingConf(string deviceSn, CarPass.Domains.Communications.Messages.TowingConfMessage newTowingConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployObdConf", ReplyAction="http://tempuri.org/IDeployService/DeployObdConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployObdConf(string deviceSn, CarPass.Domains.Communications.Messages.ObdConfMessage newObdConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployObdProtocolConf", ReplyAction="http://tempuri.org/IDeployService/DeployObdProtocolConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployObdProtocolConf(string deviceSn, CarPass.Domains.Communications.Messages.ObdProtocolConfMessage newObdProtocolConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployGeoFenceConf", ReplyAction="http://tempuri.org/IDeployService/DeployGeoFenceConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployGeoFenceConf(string deviceSn, CarPass.Domains.Communications.Messages.GeoFenceConfMessage newGeoFenceConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployVehicleBatteryConf", ReplyAction="http://tempuri.org/IDeployService/DeployVehicleBatteryConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployVehicleBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.VehicleBatteryConfMessage newVehicleBatteryConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployFuelDropConf", ReplyAction="http://tempuri.org/IDeployService/DeployFuelDropConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployFuelDropConf(string deviceSn, CarPass.Domains.Communications.Messages.FuelDropConfMessage newFuelDropConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployIdlingConf", ReplyAction="http://tempuri.org/IDeployService/DeployIdlingConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployIdlingConf(string deviceSn, CarPass.Domains.Communications.Messages.IdlingConfMessage newIdlingConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployGeoPointProfileConf", ReplyAction="http://tempuri.org/IDeployService/DeployGeoPointProfileConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployGeoPointProfileConf(string deviceSn, CarPass.Domains.Communications.Messages.GeoPointProfileConfMessage newGeoPointProfileConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployCommunicationProtocolConf", ReplyAction="http://tempuri.org/IDeployService/DeployCommunicationProtocolConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployCommunicationProtocolConf(string deviceSn, CarPass.Domains.Communications.Messages.CommunicationProtocolConfMessage newCommunicationProtocolConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployEngineStartStopConf", ReplyAction="http://tempuri.org/IDeployService/DeployEngineStartStopConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployEngineStartStopConf(string deviceSn, CarPass.Domains.Communications.Messages.EngineStartStopConfMessage newEngineStartStopConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployGps3DFixConf", ReplyAction="http://tempuri.org/IDeployService/DeployGps3DFixConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployGps3DFixConf(string deviceSn, CarPass.Domains.Communications.Messages.Gps3DFixConfMessage newGps3DFixConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployJourneySummaryConf", ReplyAction="http://tempuri.org/IDeployService/DeployJourneySummaryConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployJourneySummaryConf(string deviceSn, CarPass.Domains.Communications.Messages.JourneySummaryConfMessage newJourneySummaryConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployAGpsConf", ReplyAction="http://tempuri.org/IDeployService/DeployAGpsConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployAGpsConf(string deviceSn, CarPass.Domains.Communications.Messages.AGpsConfMessage newAGpsConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployAesKeyConf", ReplyAction="http://tempuri.org/IDeployService/DeployAesKeyConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployAesKeyConf(string deviceSn, CarPass.Domains.Communications.Messages.AesKeyConfMessage newAesKeyConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployInternalBatteryConf", ReplyAction="http://tempuri.org/IDeployService/DeployInternalBatteryConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployInternalBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.InternalBatteryConfMessage newInternalBatteryConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployTiltAlertConf", ReplyAction="http://tempuri.org/IDeployService/DeployTiltAlertConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployTiltAlertConf(string deviceSn, CarPass.Domains.Communications.Messages.TiltAlertConfMessage newTiltAlertConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/DeployStationeryAlertConf", ReplyAction="http://tempuri.org/IDeployService/DeployStationeryAlertConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployStationeryAlertConf(string deviceSn, CarPass.Domains.Communications.Messages.StationeryAlertConfMessage newStationeryAlertConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployService/GetPendingReqConfAndCmd", ReplyAction="http://tempuri.org/IDeployService/GetPendingReqConfAndCmdResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.ReqConfAndCmd[] GetPendingReqConfAndCmd(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployAlgorithmConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployAlgorithmConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployAlgorithmConf(string deviceSn, CarPass.Domains.Communications.Messages.AlgorithmConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployHistogramsConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployHistogramsConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployHistogramsConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployTowingConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployTowingConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployTowingConf(string deviceSn, CarPass.Domains.Communications.Messages.TowingConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployVehicleBatteryConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployVehicleBatteryConfRespons" +
            "e")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployVehicleBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.VehicleBatteryConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployFuelDropConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployFuelDropConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployFuelDropConf(string deviceSn, CarPass.Domains.Communications.Messages.FuelDropConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployIdlingConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployIdlingConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployIdlingConf(string deviceSn, CarPass.Domains.Communications.Messages.IdlingConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployGeoPointProfileConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployGeoPointProfileConfRespon" +
            "se")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployGeoPointProfileConf(string deviceSn, CarPass.Domains.Communications.Messages.GeoPointProfileConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployCommunicationProtocolConf" +
            "", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployCommunicationProtocolConf" +
            "Response")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployCommunicationProtocolConf(string deviceSn, CarPass.Domains.Communications.Messages.CommunicationProtocolConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployEngineStartStopConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployEngineStartStopConfRespon" +
            "se")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployEngineStartStopConf(string deviceSn, CarPass.Domains.Communications.Messages.EngineStartStopConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployGps3DFixConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployGps3DFixConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployGps3DFixConf(string deviceSn, CarPass.Domains.Communications.Messages.Gps3DFixConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployJourneySummaryConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployJourneySummaryConfRespons" +
            "e")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployJourneySummaryConf(string deviceSn, CarPass.Domains.Communications.Messages.JourneySummaryConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployAGpsConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployAGpsConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployAGpsConf(string deviceSn, CarPass.Domains.Communications.Messages.AGpsConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployInternalBatteryConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployInternalBatteryConfRespon" +
            "se")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployInternalBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.InternalBatteryConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployTiltAlertConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployTiltAlertConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployTiltAlertConf(string deviceSn, CarPass.Domains.Communications.Messages.TiltAlertConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployObdConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployObdConfResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployObdConf(string deviceSn, CarPass.Domains.Communications.Messages.ObdConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeployScheduleService/ScheduleDeployHistogramsBinConf", ReplyAction="http://tempuri.org/IDeployScheduleService/ScheduleDeployHistogramsBinConfResponse" +
            "")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployHistogramsBinConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsBinConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/DeleteBinCountHistogram", ReplyAction="http://tempuri.org/ICommandService/DeleteBinCountHistogramResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeleteBinCountHistogram(string deviceSn, CarPass.Domains.Communications.Messages.DeleteBinCountHistogramMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceUploadHistogram", ReplyAction="http://tempuri.org/ICommandService/ForceUploadHistogramResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadHistogram(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadHistogramMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/RequestObdData", ReplyAction="http://tempuri.org/ICommandService/RequestObdDataResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult RequestObdData(string deviceSn, CarPass.Domains.Communications.Messages.RequestObdDataMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/RequestLocationUpdate", ReplyAction="http://tempuri.org/ICommandService/RequestLocationUpdateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CarPass.Domains.Communications.Messages.ForceUploadGeoPointLast48HrsMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CarPass.Domains.Communications.Messages.ForceUploadGeoPointInMemoryMessage))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CarPass.Domains.Communications.Messages.ForceUploadLastGeoPointsInMemoryMessage))]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult RequestLocationUpdate(string deviceSn, CarPass.Domains.Communications.Messages.RequestLocationUpdateMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceUploadGeoPointLast48Hrs", ReplyAction="http://tempuri.org/ICommandService/ForceUploadGeoPointLast48HrsResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadGeoPointLast48Hrs(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadGeoPointLast48HrsMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceUploadGeoPointInMemory", ReplyAction="http://tempuri.org/ICommandService/ForceUploadGeoPointInMemoryResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadGeoPointInMemory(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadGeoPointInMemoryMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceUploadLastGeoPointsInMemory", ReplyAction="http://tempuri.org/ICommandService/ForceUploadLastGeoPointsInMemoryResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadLastGeoPointsInMemory(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadLastGeoPointsInMemoryMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceUploadRawAcceleration", ReplyAction="http://tempuri.org/ICommandService/ForceUploadRawAccelerationResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadRawAcceleration(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadRawAccelerationMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/EncryptionOption", ReplyAction="http://tempuri.org/ICommandService/EncryptionOptionResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult EncryptionOption(string deviceSn, CarPass.Domains.Communications.Messages.EncryptionOptionMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/CompressionOption", ReplyAction="http://tempuri.org/ICommandService/CompressionOptionResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult CompressionOption(string deviceSn, CarPass.Domains.Communications.Messages.CompressionOptionMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceDownloadOfAGps", ReplyAction="http://tempuri.org/ICommandService/ForceDownloadOfAGpsResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceDownloadOfAGps(string deviceSn, CarPass.Domains.Communications.Messages.ForceDownloadOfAgpsMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceRequestButton", ReplyAction="http://tempuri.org/ICommandService/ForceRequestButtonResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceRequestButton(string deviceSn, CarPass.Domains.Communications.Messages.ForceRequestButtonMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/PairDeviceAndDongle", ReplyAction="http://tempuri.org/ICommandService/PairDeviceAndDongleResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult PairDeviceAndDongle(string deviceSn, CarPass.Domains.Communications.Messages.PairDeviceAndDongleMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ClearDataOnDevice", ReplyAction="http://tempuri.org/ICommandService/ClearDataOnDeviceResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ClearDataOnDevice(string deviceSn, CarPass.Domains.Communications.Messages.ClearDataOnDeviceMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceToChangeProfile", ReplyAction="http://tempuri.org/ICommandService/ForceToChangeProfileResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToChangeProfile(string deviceSn, CarPass.Domains.Communications.Messages.ForceToChangeProfileMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceToUploadHealthAndInfo", ReplyAction="http://tempuri.org/ICommandService/ForceToUploadHealthAndInfoResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToUploadHealthAndInfo(string deviceSn, CarPass.Domains.Communications.Messages.ForceToUploadHealthAndInfoMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/RequestGsmCellDataOnMemory", ReplyAction="http://tempuri.org/ICommandService/RequestGsmCellDataOnMemoryResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult RequestGsmCellDataOnMemory(string deviceSn, CarPass.Domains.Communications.Messages.RequestGsmCellDataOnMemoryMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceToChangeGpsReceptionOption", ReplyAction="http://tempuri.org/ICommandService/ForceToChangeGpsReceptionOptionResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToChangeGpsReceptionOption(string deviceSn, CarPass.Domains.Communications.Messages.ForceToChangeGpsReceptionOptionMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ActivateKeyfobProfile", ReplyAction="http://tempuri.org/ICommandService/ActivateKeyfobProfileResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ActivateKeyfobProfile(string deviceSn, CarPass.Domains.Communications.Messages.ActivateKeyfobProfileMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceUploadPid", ReplyAction="http://tempuri.org/ICommandService/ForceUploadPidResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadPid(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadPidMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceToDumpFwConfigurationAndProfile", ReplyAction="http://tempuri.org/ICommandService/ForceToDumpFwConfigurationAndProfileResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToDumpFwConfigurationAndProfile(string deviceSn, CarPass.Domains.Communications.Messages.ForceToDumpFwConfigurationAndProfileMessage msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ForceToManageMileageCalculation", ReplyAction="http://tempuri.org/ICommandService/ForceToManageMileageCalculationResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToManageMileageCalculation(string deviceSn, byte eventIdentifier, byte mileageSetEffected, byte startStopAccruing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/CancleRequestId", ReplyAction="http://tempuri.org/ICommandService/CancleRequestIdResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult CancleRequestId(string imei, uint resuestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/CancleRequestIdByDeviceSn", ReplyAction="http://tempuri.org/ICommandService/CancleRequestIdByDeviceSnResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.OperationResult CancleRequestIdByDeviceSn(string deviceSn, uint resuestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetGeofenceOverlapWith", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetGeofenceOverlapWithResponse")]
        CarPass.Domains.Communications.Messages.GeoFenceConfMessage[] GetGeofenceOverlapWith(string deviceSn, CarPass.Domains.Communications.Messages.GeoFenceConfMessage newGeoFenceConf);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDeployedGeoFenceConf", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeployedGeoFenceConfResponse")]
        CarPass.Domains.Communications.Messages.GeoFenceConfMessage[] GetDeployedGeoFenceConf(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDeployingGeoFenceConf", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeployingGeoFenceConfResponse")]
        CarPass.Domains.Communications.Messages.GeoFenceConfMessage[] GetDeployingGeoFenceConf(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDeviceByImei", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeviceByImeiResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeviceDto GetDeviceByImei(string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/DeviceExistByDeviceSN", ReplyAction="http://tempuri.org/IDeviceCommunicationService/DeviceExistByDeviceSNResponse")]
        bool DeviceExistByDeviceSN(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetJourneyGpsFixAlertByDeviceSNAnd" +
            "JourneyList", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetJourneyGpsFixAlertByDeviceSNAnd" +
            "JourneyListResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.JourneyGpsFixAlertDto[] GetJourneyGpsFixAlertByDeviceSNAndJourneyList(string deviceSn, ushort[] journeyIdList, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentHealthInfo", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentHealthInfoResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.HealthInfoDto GetCurrentHealthInfo(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentObdCore", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentObdCoreResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.ObdCoreDto GetCurrentObdCore(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentJourneySummary", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentJourneySummaryResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.JourneySummaryDto GetCurrentJourneySummary(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentCasingOpeningAlert", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentCasingOpeningAlertRespon" +
            "se")]
        CarPass.Domains.Communications.Messages.CasingOpeningAlertMessage GetCurrentCasingOpeningAlert(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentGoodMorning", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentGoodMorningResponse")]
        CarPass.Domains.Communications.Messages.GoodMorningMessage GetCurrentGoodMorning(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentButtonTriggered", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentButtonTriggeredResponse")]
        CarPass.Domains.Communications.Messages.ButtonTriggeredMessage GetCurrentButtonTriggered(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentCalibrationInformation", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentCalibrationInformationRe" +
            "sponse")]
        CarPass.Domains.Communications.Messages.CalibrationInformationMessage GetCurrentCalibrationInformation(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentGpsAwakeArray", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentGpsAwakeArrayResponse")]
        CarPass.Domains.Communications.Messages.GpsAwakeMessage[] GetCurrentGpsAwakeArray(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentEngine", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentEngineResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.EngineStartStopDto[] GetCurrentEngine(string deviceSn, System.DateTime startTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCurrentInternalBatterySoh", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCurrentInternalBatterySohRespon" +
            "se")]
        CarPass.Domains.Communications.Messages.InternalBatterySohMessage GetCurrentInternalBatterySoh(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/MustBeUpgrade", ReplyAction="http://tempuri.org/IDeviceCommunicationService/MustBeUpgradeResponse")]
        bool MustBeUpgrade(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDeviceConfById", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeviceConfByIdResponse")]
        CarPass.Domains.Communications.ValueObjects.DeviceConf GetDeviceConfById(CarPass.Domains.Communications.ValueObjects.DeviceConfId deviceConfId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetGeoFenceConfByPacketId", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetGeoFenceConfByPacketIdResponse")]
        CarPass.Domains.Communications.Messages.GeoFenceConfMessage GetGeoFenceConfByPacketId(string packetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDeviceConfByDeviceSn", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeviceConfByDeviceSnResponse")]
        CarPass.Domains.Communications.ValueObjects.DeviceConf GetDeviceConfByDeviceSn(string deviceSn, string confType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationBetweenRespons" +
            "e")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLastKnownLocationBetween(string deviceSn, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationsBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationsBetweenRespon" +
            "se")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLastKnownLocationsBetween(string[] deviceSns, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetAllLastKnownLocationsBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetAllLastKnownLocationsBetweenRes" +
            "ponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetAllLastKnownLocationsBetween(string deviceSn, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsWithHavDistance", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsWithHavDistanceRespons" +
            "e")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLocationsWithHavDistance(string deviceSn, System.DateTime startTrackingTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDistance", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDistanceResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.MileageDto[] GetDistance(string deviceSn, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDistancePerDay", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDistancePerDayResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.MileageDto[] GetDistancePerDay(string deviceSn, System.DateTime fromDate, System.DateTime toDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsForSpeedCheck", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsForSpeedCheckResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.LocationsForSpeedCheck GetLocationsForSpeedCheck(string deviceSn, System.TimeSpan durationDrive, System.TimeSpan waitingTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetSpeedCheck", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetSpeedCheckResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.SpeedCheckDto[] GetSpeedCheck(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetSpeedCheckByBeginTime", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetSpeedCheckByBeginTimeResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.SpeedCheckDto[] GetSpeedCheckByBeginTime(string deviceSn, System.DateTime beginTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/EndTcpConnection", ReplyAction="http://tempuri.org/IDeviceCommunicationService/EndTcpConnectionResponse")]
        void EndTcpConnection(string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetNonGeoPointGsmInfoByPacketId", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetNonGeoPointGsmInfoByPacketIdRes" +
            "ponse")]
        CarPass.Domains.Communications.Messages.NonGeoPointGsmInfoMessage[] GetNonGeoPointGsmInfoByPacketId(string packetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocation", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLastKnownLocation(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocations", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationsResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLastKnownLocations(string[] deviceSns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationByImei", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationByImeiResponse" +
            "")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLastKnownLocationByImei(string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationByTop", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLastKnownLocationByTopResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLastKnownLocationByTop(string deviceSn, byte top);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsByMeters", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsByMetersResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsByMeters(string deviceSn, System.DateTime beginTime, double limitMeters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsBetweenResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsWithJourneyCompletedBe" +
            "tween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsWithJourneyCompletedBe" +
            "tweenResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsWithJourneyCompletedBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetAllLocationsWithJourneyComplete" +
            "dBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetAllLocationsWithJourneyComplete" +
            "dBetweenResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetAllLocationsWithJourneyCompletedBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsWithJourneyCompletedAn" +
            "dUsageBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsWithJourneyCompletedAn" +
            "dUsageBetweenResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointHistoryDto GetLocationsWithJourneyCompletedAndUsageBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetLocationsByJourney", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetLocationsByJourneyResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsByJourney(string deviceSn, int journeyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDeviceSnFileterByLastGoodNight", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeviceSnFileterByLastGoodNightR" +
            "esponse")]
        string[] GetDeviceSnFileterByLastGoodNight(string[] deviceSn, uint priorHours);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/IsDeviceComunicated", ReplyAction="http://tempuri.org/IDeviceCommunicationService/IsDeviceComunicatedResponse")]
        bool IsDeviceComunicated(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetJourneyInfoBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetJourneyInfoBetweenResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.JourneyDto[] GetJourneyInfoBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetJourneyInfoByDate", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetJourneyInfoByDateResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.JourneyDto[] GetJourneyInfoByDate(string deviceSn, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetTotalDistanceJourneyGroupByBetw" +
            "een", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetTotalDistanceJourneyGroupByBetw" +
            "eenResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.TotalDistanceJourneyDto[] GetTotalDistanceJourneyGroupByBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetTotalDistanceJourneyGroupByDate" +
            "", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetTotalDistanceJourneyGroupByDate" +
            "Response")]
        DeviceCommunicationExtJsWeb.DeviceService.TotalDistanceJourneyDto[] GetTotalDistanceJourneyGroupByDate(string deviceSn, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetVehicleUsageInfoPerDay", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetVehicleUsageInfoPerDayResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.VehicleUsageInfoDto GetVehicleUsageInfoPerDay(string deviceSn, System.DateTime day);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetVehicleUsageInfoPerMonth", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetVehicleUsageInfoPerMonthRespons" +
            "e")]
        DeviceCommunicationExtJsWeb.DeviceService.VehicleUsageInfoDto GetVehicleUsageInfoPerMonth(string deviceSn, System.DateTime month);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetVehicleUsageInfoBetween", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetVehicleUsageInfoBetweenResponse" +
            "")]
        DeviceCommunicationExtJsWeb.DeviceService.VehicleUsageInfoDto[] GetVehicleUsageInfoBetween(string deviceSn, System.DateTime fromDate, System.DateTime toDate, byte firstSpeed, byte secondSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/Echo", ReplyAction="http://tempuri.org/IDeviceCommunicationService/EchoResponse")]
        string Echo(string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/IsVehicleBatterLowAlertWithIn24Hou" +
            "rse", ReplyAction="http://tempuri.org/IDeviceCommunicationService/IsVehicleBatterLowAlertWithIn24Hou" +
            "rseResponse")]
        bool IsVehicleBatterLowAlertWithIn24Hourse(string imie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetPowerLossAlert", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetPowerLossAlertResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.PowerLossAlert GetPowerLossAlert(string imie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetCumulativeDuration", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetCumulativeDurationResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.CummulativeDuration GetCumulativeDuration(string imie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDevice", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDeviceResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeviceDto GetDevice(string deviceSn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetAllDevices", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetAllDevicesResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetAllDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDemoDevices", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDemoDevicesResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetDemoDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetActiveDevices", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetActiveDevicesResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetActiveDevices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeviceCommunicationService/GetDemoOrActiveDevices", ReplyAction="http://tempuri.org/IDeviceCommunicationService/GetDemoOrActiveDevicesResponse")]
        DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetDemoOrActiveDevices();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeviceCommunicationServiceChannel : DeviceCommunicationExtJsWeb.DeviceService.IDeviceCommunicationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeviceCommunicationServiceClient : System.ServiceModel.ClientBase<DeviceCommunicationExtJsWeb.DeviceService.IDeviceCommunicationService>, DeviceCommunicationExtJsWeb.DeviceService.IDeviceCommunicationService {
        
        public DeviceCommunicationServiceClient() {
        }
        
        public DeviceCommunicationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeviceCommunicationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceCommunicationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeviceCommunicationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployOtaHeaderRequest(string deviceSn, CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage otaHeaderRequest, byte[] firmeware) {
            return base.Channel.DeployOtaHeaderRequest(deviceSn, otaHeaderRequest, firmeware);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployOtaHeaderRequestFromFilePath(string deviceSn, CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage otaHeaderRequest, string otaTempFilePath) {
            return base.Channel.DeployOtaHeaderRequestFromFilePath(deviceSn, otaHeaderRequest, otaTempFilePath);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployOtaHeaderRequestFromGridFs(string deviceSn, CarPass.Domains.Communications.Messages.OtaHeaderRequestMessage otaHeaderRequest, string databaseName, string otaMd5) {
            return base.Channel.DeployOtaHeaderRequestFromGridFs(deviceSn, otaHeaderRequest, databaseName, otaMd5);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeployOtaStateResult GetDeployOtaState(string deviceSn, System.DateTime beginRequestUpdateOtaDay) {
            return base.Channel.GetDeployOtaState(deviceSn, beginRequestUpdateOtaDay);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult Deploy(string deviceSnOrImei, uint requestId) {
            return base.Channel.Deploy(deviceSnOrImei, requestId);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployAlgorithmConf(string deviceSn, CarPass.Domains.Communications.Messages.AlgorithmConfMessage newAlgoConf) {
            return base.Channel.DeployAlgorithmConf(deviceSn, newAlgoConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployHistogramsConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsConfMessage newHistogramsConf) {
            return base.Channel.DeployHistogramsConf(deviceSn, newHistogramsConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployHistogramsBinConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsBinConfMessage newHistogramsBinConf) {
            return base.Channel.DeployHistogramsBinConf(deviceSn, newHistogramsBinConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployTowingConf(string deviceSn, CarPass.Domains.Communications.Messages.TowingConfMessage newTowingConf) {
            return base.Channel.DeployTowingConf(deviceSn, newTowingConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployObdConf(string deviceSn, CarPass.Domains.Communications.Messages.ObdConfMessage newObdConf) {
            return base.Channel.DeployObdConf(deviceSn, newObdConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployObdProtocolConf(string deviceSn, CarPass.Domains.Communications.Messages.ObdProtocolConfMessage newObdProtocolConf) {
            return base.Channel.DeployObdProtocolConf(deviceSn, newObdProtocolConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployGeoFenceConf(string deviceSn, CarPass.Domains.Communications.Messages.GeoFenceConfMessage newGeoFenceConf) {
            return base.Channel.DeployGeoFenceConf(deviceSn, newGeoFenceConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployVehicleBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.VehicleBatteryConfMessage newVehicleBatteryConf) {
            return base.Channel.DeployVehicleBatteryConf(deviceSn, newVehicleBatteryConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployFuelDropConf(string deviceSn, CarPass.Domains.Communications.Messages.FuelDropConfMessage newFuelDropConf) {
            return base.Channel.DeployFuelDropConf(deviceSn, newFuelDropConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployIdlingConf(string deviceSn, CarPass.Domains.Communications.Messages.IdlingConfMessage newIdlingConf) {
            return base.Channel.DeployIdlingConf(deviceSn, newIdlingConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployGeoPointProfileConf(string deviceSn, CarPass.Domains.Communications.Messages.GeoPointProfileConfMessage newGeoPointProfileConf) {
            return base.Channel.DeployGeoPointProfileConf(deviceSn, newGeoPointProfileConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployCommunicationProtocolConf(string deviceSn, CarPass.Domains.Communications.Messages.CommunicationProtocolConfMessage newCommunicationProtocolConf) {
            return base.Channel.DeployCommunicationProtocolConf(deviceSn, newCommunicationProtocolConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployEngineStartStopConf(string deviceSn, CarPass.Domains.Communications.Messages.EngineStartStopConfMessage newEngineStartStopConf) {
            return base.Channel.DeployEngineStartStopConf(deviceSn, newEngineStartStopConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployGps3DFixConf(string deviceSn, CarPass.Domains.Communications.Messages.Gps3DFixConfMessage newGps3DFixConf) {
            return base.Channel.DeployGps3DFixConf(deviceSn, newGps3DFixConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployJourneySummaryConf(string deviceSn, CarPass.Domains.Communications.Messages.JourneySummaryConfMessage newJourneySummaryConf) {
            return base.Channel.DeployJourneySummaryConf(deviceSn, newJourneySummaryConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployAGpsConf(string deviceSn, CarPass.Domains.Communications.Messages.AGpsConfMessage newAGpsConf) {
            return base.Channel.DeployAGpsConf(deviceSn, newAGpsConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployAesKeyConf(string deviceSn, CarPass.Domains.Communications.Messages.AesKeyConfMessage newAesKeyConf) {
            return base.Channel.DeployAesKeyConf(deviceSn, newAesKeyConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployInternalBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.InternalBatteryConfMessage newInternalBatteryConf) {
            return base.Channel.DeployInternalBatteryConf(deviceSn, newInternalBatteryConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployTiltAlertConf(string deviceSn, CarPass.Domains.Communications.Messages.TiltAlertConfMessage newTiltAlertConf) {
            return base.Channel.DeployTiltAlertConf(deviceSn, newTiltAlertConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeployStationeryAlertConf(string deviceSn, CarPass.Domains.Communications.Messages.StationeryAlertConfMessage newStationeryAlertConf) {
            return base.Channel.DeployStationeryAlertConf(deviceSn, newStationeryAlertConf);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.ReqConfAndCmd[] GetPendingReqConfAndCmd(string deviceSn) {
            return base.Channel.GetPendingReqConfAndCmd(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployAlgorithmConf(string deviceSn, CarPass.Domains.Communications.Messages.AlgorithmConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployAlgorithmConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployHistogramsConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployHistogramsConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployTowingConf(string deviceSn, CarPass.Domains.Communications.Messages.TowingConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployTowingConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployVehicleBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.VehicleBatteryConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployVehicleBatteryConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployFuelDropConf(string deviceSn, CarPass.Domains.Communications.Messages.FuelDropConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployFuelDropConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployIdlingConf(string deviceSn, CarPass.Domains.Communications.Messages.IdlingConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployIdlingConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployGeoPointProfileConf(string deviceSn, CarPass.Domains.Communications.Messages.GeoPointProfileConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployGeoPointProfileConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployCommunicationProtocolConf(string deviceSn, CarPass.Domains.Communications.Messages.CommunicationProtocolConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployCommunicationProtocolConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployEngineStartStopConf(string deviceSn, CarPass.Domains.Communications.Messages.EngineStartStopConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployEngineStartStopConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployGps3DFixConf(string deviceSn, CarPass.Domains.Communications.Messages.Gps3DFixConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployGps3DFixConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployJourneySummaryConf(string deviceSn, CarPass.Domains.Communications.Messages.JourneySummaryConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployJourneySummaryConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployAGpsConf(string deviceSn, CarPass.Domains.Communications.Messages.AGpsConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployAGpsConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployInternalBatteryConf(string deviceSn, CarPass.Domains.Communications.Messages.InternalBatteryConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployInternalBatteryConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployTiltAlertConf(string deviceSn, CarPass.Domains.Communications.Messages.TiltAlertConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployTiltAlertConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployObdConf(string deviceSn, CarPass.Domains.Communications.Messages.ObdConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployObdConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ScheduleDeployHistogramsBinConf(string deviceSn, CarPass.Domains.Communications.Messages.HistogramsBinConfMessage newConf, CarPass.Domains.Communications.ValueObjects.DeployScheduleElement deployScheduleElement) {
            return base.Channel.ScheduleDeployHistogramsBinConf(deviceSn, newConf, deployScheduleElement);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult DeleteBinCountHistogram(string deviceSn, CarPass.Domains.Communications.Messages.DeleteBinCountHistogramMessage msg) {
            return base.Channel.DeleteBinCountHistogram(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadHistogram(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadHistogramMessage msg) {
            return base.Channel.ForceUploadHistogram(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult RequestObdData(string deviceSn, CarPass.Domains.Communications.Messages.RequestObdDataMessage msg) {
            return base.Channel.RequestObdData(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult RequestLocationUpdate(string deviceSn, CarPass.Domains.Communications.Messages.RequestLocationUpdateMessage msg) {
            return base.Channel.RequestLocationUpdate(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadGeoPointLast48Hrs(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadGeoPointLast48HrsMessage msg) {
            return base.Channel.ForceUploadGeoPointLast48Hrs(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadGeoPointInMemory(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadGeoPointInMemoryMessage msg) {
            return base.Channel.ForceUploadGeoPointInMemory(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadLastGeoPointsInMemory(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadLastGeoPointsInMemoryMessage msg) {
            return base.Channel.ForceUploadLastGeoPointsInMemory(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadRawAcceleration(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadRawAccelerationMessage msg) {
            return base.Channel.ForceUploadRawAcceleration(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult EncryptionOption(string deviceSn, CarPass.Domains.Communications.Messages.EncryptionOptionMessage msg) {
            return base.Channel.EncryptionOption(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult CompressionOption(string deviceSn, CarPass.Domains.Communications.Messages.CompressionOptionMessage msg) {
            return base.Channel.CompressionOption(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceDownloadOfAGps(string deviceSn, CarPass.Domains.Communications.Messages.ForceDownloadOfAgpsMessage msg) {
            return base.Channel.ForceDownloadOfAGps(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceRequestButton(string deviceSn, CarPass.Domains.Communications.Messages.ForceRequestButtonMessage msg) {
            return base.Channel.ForceRequestButton(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult PairDeviceAndDongle(string deviceSn, CarPass.Domains.Communications.Messages.PairDeviceAndDongleMessage msg) {
            return base.Channel.PairDeviceAndDongle(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ClearDataOnDevice(string deviceSn, CarPass.Domains.Communications.Messages.ClearDataOnDeviceMessage msg) {
            return base.Channel.ClearDataOnDevice(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToChangeProfile(string deviceSn, CarPass.Domains.Communications.Messages.ForceToChangeProfileMessage msg) {
            return base.Channel.ForceToChangeProfile(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToUploadHealthAndInfo(string deviceSn, CarPass.Domains.Communications.Messages.ForceToUploadHealthAndInfoMessage msg) {
            return base.Channel.ForceToUploadHealthAndInfo(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult RequestGsmCellDataOnMemory(string deviceSn, CarPass.Domains.Communications.Messages.RequestGsmCellDataOnMemoryMessage msg) {
            return base.Channel.RequestGsmCellDataOnMemory(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToChangeGpsReceptionOption(string deviceSn, CarPass.Domains.Communications.Messages.ForceToChangeGpsReceptionOptionMessage msg) {
            return base.Channel.ForceToChangeGpsReceptionOption(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ActivateKeyfobProfile(string deviceSn, CarPass.Domains.Communications.Messages.ActivateKeyfobProfileMessage msg) {
            return base.Channel.ActivateKeyfobProfile(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceUploadPid(string deviceSn, CarPass.Domains.Communications.Messages.ForceUploadPidMessage msg) {
            return base.Channel.ForceUploadPid(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToDumpFwConfigurationAndProfile(string deviceSn, CarPass.Domains.Communications.Messages.ForceToDumpFwConfigurationAndProfileMessage msg) {
            return base.Channel.ForceToDumpFwConfigurationAndProfile(deviceSn, msg);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult ForceToManageMileageCalculation(string deviceSn, byte eventIdentifier, byte mileageSetEffected, byte startStopAccruing) {
            return base.Channel.ForceToManageMileageCalculation(deviceSn, eventIdentifier, mileageSetEffected, startStopAccruing);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult CancleRequestId(string imei, uint resuestId) {
            return base.Channel.CancleRequestId(imei, resuestId);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.OperationResult CancleRequestIdByDeviceSn(string deviceSn, uint resuestId) {
            return base.Channel.CancleRequestIdByDeviceSn(deviceSn, resuestId);
        }
        
        public CarPass.Domains.Communications.Messages.GeoFenceConfMessage[] GetGeofenceOverlapWith(string deviceSn, CarPass.Domains.Communications.Messages.GeoFenceConfMessage newGeoFenceConf) {
            return base.Channel.GetGeofenceOverlapWith(deviceSn, newGeoFenceConf);
        }
        
        public CarPass.Domains.Communications.Messages.GeoFenceConfMessage[] GetDeployedGeoFenceConf(string deviceSn) {
            return base.Channel.GetDeployedGeoFenceConf(deviceSn);
        }
        
        public CarPass.Domains.Communications.Messages.GeoFenceConfMessage[] GetDeployingGeoFenceConf(string deviceSn) {
            return base.Channel.GetDeployingGeoFenceConf(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceDto GetDeviceByImei(string imei) {
            return base.Channel.GetDeviceByImei(imei);
        }
        
        public bool DeviceExistByDeviceSN(string deviceSn) {
            return base.Channel.DeviceExistByDeviceSN(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.JourneyGpsFixAlertDto[] GetJourneyGpsFixAlertByDeviceSNAndJourneyList(string deviceSn, ushort[] journeyIdList, System.DateTime from, System.DateTime to) {
            return base.Channel.GetJourneyGpsFixAlertByDeviceSNAndJourneyList(deviceSn, journeyIdList, from, to);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.HealthInfoDto GetCurrentHealthInfo(string deviceSn) {
            return base.Channel.GetCurrentHealthInfo(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.ObdCoreDto GetCurrentObdCore(string deviceSn) {
            return base.Channel.GetCurrentObdCore(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.JourneySummaryDto GetCurrentJourneySummary(string deviceSn) {
            return base.Channel.GetCurrentJourneySummary(deviceSn);
        }
        
        public CarPass.Domains.Communications.Messages.CasingOpeningAlertMessage GetCurrentCasingOpeningAlert(string deviceSn) {
            return base.Channel.GetCurrentCasingOpeningAlert(deviceSn);
        }
        
        public CarPass.Domains.Communications.Messages.GoodMorningMessage GetCurrentGoodMorning(string deviceSn) {
            return base.Channel.GetCurrentGoodMorning(deviceSn);
        }
        
        public CarPass.Domains.Communications.Messages.ButtonTriggeredMessage GetCurrentButtonTriggered(string deviceSn) {
            return base.Channel.GetCurrentButtonTriggered(deviceSn);
        }
        
        public CarPass.Domains.Communications.Messages.CalibrationInformationMessage GetCurrentCalibrationInformation(string deviceSn) {
            return base.Channel.GetCurrentCalibrationInformation(deviceSn);
        }
        
        public CarPass.Domains.Communications.Messages.GpsAwakeMessage[] GetCurrentGpsAwakeArray(string deviceSn) {
            return base.Channel.GetCurrentGpsAwakeArray(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.EngineStartStopDto[] GetCurrentEngine(string deviceSn, System.DateTime startTime) {
            return base.Channel.GetCurrentEngine(deviceSn, startTime);
        }
        
        public CarPass.Domains.Communications.Messages.InternalBatterySohMessage GetCurrentInternalBatterySoh(string deviceSn) {
            return base.Channel.GetCurrentInternalBatterySoh(deviceSn);
        }
        
        public bool MustBeUpgrade(string deviceSn) {
            return base.Channel.MustBeUpgrade(deviceSn);
        }
        
        public CarPass.Domains.Communications.ValueObjects.DeviceConf GetDeviceConfById(CarPass.Domains.Communications.ValueObjects.DeviceConfId deviceConfId) {
            return base.Channel.GetDeviceConfById(deviceConfId);
        }
        
        public CarPass.Domains.Communications.Messages.GeoFenceConfMessage GetGeoFenceConfByPacketId(string packetId) {
            return base.Channel.GetGeoFenceConfByPacketId(packetId);
        }
        
        public CarPass.Domains.Communications.ValueObjects.DeviceConf GetDeviceConfByDeviceSn(string deviceSn, string confType) {
            return base.Channel.GetDeviceConfByDeviceSn(deviceSn, confType);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLastKnownLocationBetween(string deviceSn, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetLastKnownLocationBetween(deviceSn, fromDate, toDate);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLastKnownLocationsBetween(string[] deviceSns, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetLastKnownLocationsBetween(deviceSns, fromDate, toDate);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetAllLastKnownLocationsBetween(string deviceSn, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetAllLastKnownLocationsBetween(deviceSn, fromDate, toDate);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLocationsWithHavDistance(string deviceSn, System.DateTime startTrackingTime) {
            return base.Channel.GetLocationsWithHavDistance(deviceSn, startTrackingTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.MileageDto[] GetDistance(string deviceSn, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetDistance(deviceSn, fromDate, toDate);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.MileageDto[] GetDistancePerDay(string deviceSn, System.DateTime fromDate, System.DateTime toDate) {
            return base.Channel.GetDistancePerDay(deviceSn, fromDate, toDate);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.LocationsForSpeedCheck GetLocationsForSpeedCheck(string deviceSn, System.TimeSpan durationDrive, System.TimeSpan waitingTime) {
            return base.Channel.GetLocationsForSpeedCheck(deviceSn, durationDrive, waitingTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.SpeedCheckDto[] GetSpeedCheck(string deviceSn) {
            return base.Channel.GetSpeedCheck(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.SpeedCheckDto[] GetSpeedCheckByBeginTime(string deviceSn, System.DateTime beginTime) {
            return base.Channel.GetSpeedCheckByBeginTime(deviceSn, beginTime);
        }
        
        public void EndTcpConnection(string imei) {
            base.Channel.EndTcpConnection(imei);
        }
        
        public CarPass.Domains.Communications.Messages.NonGeoPointGsmInfoMessage[] GetNonGeoPointGsmInfoByPacketId(string packetId) {
            return base.Channel.GetNonGeoPointGsmInfoByPacketId(packetId);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLastKnownLocation(string deviceSn) {
            return base.Channel.GetLastKnownLocation(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLastKnownLocations(string[] deviceSns) {
            return base.Channel.GetLastKnownLocations(deviceSns);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto GetLastKnownLocationByImei(string imei) {
            return base.Channel.GetLastKnownLocationByImei(imei);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLastKnownLocationByTop(string deviceSn, byte top) {
            return base.Channel.GetLastKnownLocationByTop(deviceSn, top);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsByMeters(string deviceSn, System.DateTime beginTime, double limitMeters) {
            return base.Channel.GetLocationsByMeters(deviceSn, beginTime, limitMeters);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime) {
            return base.Channel.GetLocationsBetween(deviceSn, fromTime, toTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsWithJourneyCompletedBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime) {
            return base.Channel.GetLocationsWithJourneyCompletedBetween(deviceSn, fromTime, toTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetAllLocationsWithJourneyCompletedBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime) {
            return base.Channel.GetAllLocationsWithJourneyCompletedBetween(deviceSn, fromTime, toTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointHistoryDto GetLocationsWithJourneyCompletedAndUsageBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime) {
            return base.Channel.GetLocationsWithJourneyCompletedAndUsageBetween(deviceSn, fromTime, toTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.GeoPointDto[] GetLocationsByJourney(string deviceSn, int journeyId) {
            return base.Channel.GetLocationsByJourney(deviceSn, journeyId);
        }
        
        public string[] GetDeviceSnFileterByLastGoodNight(string[] deviceSn, uint priorHours) {
            return base.Channel.GetDeviceSnFileterByLastGoodNight(deviceSn, priorHours);
        }
        
        public bool IsDeviceComunicated(string deviceSn) {
            return base.Channel.IsDeviceComunicated(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.JourneyDto[] GetJourneyInfoBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime) {
            return base.Channel.GetJourneyInfoBetween(deviceSn, fromTime, toTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.JourneyDto[] GetJourneyInfoByDate(string deviceSn, System.DateTime dateTime) {
            return base.Channel.GetJourneyInfoByDate(deviceSn, dateTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.TotalDistanceJourneyDto[] GetTotalDistanceJourneyGroupByBetween(string deviceSn, System.DateTime fromTime, System.DateTime toTime) {
            return base.Channel.GetTotalDistanceJourneyGroupByBetween(deviceSn, fromTime, toTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.TotalDistanceJourneyDto[] GetTotalDistanceJourneyGroupByDate(string deviceSn, System.DateTime dateTime) {
            return base.Channel.GetTotalDistanceJourneyGroupByDate(deviceSn, dateTime);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.VehicleUsageInfoDto GetVehicleUsageInfoPerDay(string deviceSn, System.DateTime day) {
            return base.Channel.GetVehicleUsageInfoPerDay(deviceSn, day);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.VehicleUsageInfoDto GetVehicleUsageInfoPerMonth(string deviceSn, System.DateTime month) {
            return base.Channel.GetVehicleUsageInfoPerMonth(deviceSn, month);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.VehicleUsageInfoDto[] GetVehicleUsageInfoBetween(string deviceSn, System.DateTime fromDate, System.DateTime toDate, byte firstSpeed, byte secondSpeed) {
            return base.Channel.GetVehicleUsageInfoBetween(deviceSn, fromDate, toDate, firstSpeed, secondSpeed);
        }
        
        public string Echo(string msg) {
            return base.Channel.Echo(msg);
        }
        
        public bool IsVehicleBatterLowAlertWithIn24Hourse(string imie) {
            return base.Channel.IsVehicleBatterLowAlertWithIn24Hourse(imie);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.PowerLossAlert GetPowerLossAlert(string imie) {
            return base.Channel.GetPowerLossAlert(imie);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.CummulativeDuration GetCumulativeDuration(string imie) {
            return base.Channel.GetCumulativeDuration(imie);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceDto GetDevice(string deviceSn) {
            return base.Channel.GetDevice(deviceSn);
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetAllDevices() {
            return base.Channel.GetAllDevices();
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetDemoDevices() {
            return base.Channel.GetDemoDevices();
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetActiveDevices() {
            return base.Channel.GetActiveDevices();
        }
        
        public DeviceCommunicationExtJsWeb.DeviceService.DeviceDto[] GetDemoOrActiveDevices() {
            return base.Channel.GetDemoOrActiveDevices();
        }
    }
}
