//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeviceCommunicationExtJsWeb.GpsCommunicationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RequestAckCommandMessage", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Domains.Communications.Messages")]
    [System.SerializableAttribute()]
    public partial class RequestAckCommandMessage : DeviceCommunicationExtJsWeb.GpsCommunicationService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AckCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfsRevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastestAckField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastestResponseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long RequestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResponseCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageType ResponseMessageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ResponsePacketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponsePacketMD5Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResponsePacketViewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ResponsePacketsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AckCount {
            get {
                return this.AckCountField;
            }
            set {
                if ((this.AckCountField.Equals(value) != true)) {
                    this.AckCountField = value;
                    this.RaisePropertyChanged("AckCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfsRevision {
            get {
                return this.ConfsRevisionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfsRevisionField, value) != true)) {
                    this.ConfsRevisionField = value;
                    this.RaisePropertyChanged("ConfsRevision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastestAck {
            get {
                return this.LastestAckField;
            }
            set {
                if ((this.LastestAckField.Equals(value) != true)) {
                    this.LastestAckField = value;
                    this.RaisePropertyChanged("LastestAck");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastestResponse {
            get {
                return this.LastestResponseField;
            }
            set {
                if ((this.LastestResponseField.Equals(value) != true)) {
                    this.LastestResponseField = value;
                    this.RaisePropertyChanged("LastestResponse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long RequestId {
            get {
                return this.RequestIdField;
            }
            set {
                if ((this.RequestIdField.Equals(value) != true)) {
                    this.RequestIdField = value;
                    this.RaisePropertyChanged("RequestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ResponseCount {
            get {
                return this.ResponseCountField;
            }
            set {
                if ((this.ResponseCountField.Equals(value) != true)) {
                    this.ResponseCountField = value;
                    this.RaisePropertyChanged("ResponseCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageType ResponseMessageType {
            get {
                return this.ResponseMessageTypeField;
            }
            set {
                if ((this.ResponseMessageTypeField.Equals(value) != true)) {
                    this.ResponseMessageTypeField = value;
                    this.RaisePropertyChanged("ResponseMessageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ResponsePacket {
            get {
                return this.ResponsePacketField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponsePacketField, value) != true)) {
                    this.ResponsePacketField = value;
                    this.RaisePropertyChanged("ResponsePacket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponsePacketMD5 {
            get {
                return this.ResponsePacketMD5Field;
            }
            set {
                if ((object.ReferenceEquals(this.ResponsePacketMD5Field, value) != true)) {
                    this.ResponsePacketMD5Field = value;
                    this.RaisePropertyChanged("ResponsePacketMD5");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResponsePacketView {
            get {
                return this.ResponsePacketViewField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponsePacketViewField, value) != true)) {
                    this.ResponsePacketViewField = value;
                    this.RaisePropertyChanged("ResponsePacketView");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ResponsePackets {
            get {
                return this.ResponsePacketsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResponsePacketsField, value) != true)) {
                    this.ResponsePacketsField = value;
                    this.RaisePropertyChanged("ResponsePackets");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageHeader", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Domains.Communications.Messages")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.GpsCommunicationService.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage))]
    public partial class MessageHeader : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime HeaderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImeiField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageType MessageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short SeqField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] UdpPacketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime HeaderTime {
            get {
                return this.HeaderTimeField;
            }
            set {
                if ((this.HeaderTimeField.Equals(value) != true)) {
                    this.HeaderTimeField = value;
                    this.RaisePropertyChanged("HeaderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Imei {
            get {
                return this.ImeiField;
            }
            set {
                if ((object.ReferenceEquals(this.ImeiField, value) != true)) {
                    this.ImeiField = value;
                    this.RaisePropertyChanged("Imei");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageType MessageType {
            get {
                return this.MessageTypeField;
            }
            set {
                if ((this.MessageTypeField.Equals(value) != true)) {
                    this.MessageTypeField = value;
                    this.RaisePropertyChanged("MessageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short Seq {
            get {
                return this.SeqField;
            }
            set {
                if ((this.SeqField.Equals(value) != true)) {
                    this.SeqField = value;
                    this.RaisePropertyChanged("Seq");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] UdpPacket {
            get {
                return this.UdpPacketField;
            }
            set {
                if ((object.ReferenceEquals(this.UdpPacketField, value) != true)) {
                    this.UdpPacketField = value;
                    this.RaisePropertyChanged("UdpPacket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Version {
            get {
                return this.VersionField;
            }
            set {
                if ((this.VersionField.Equals(value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Domains.Communications.Messages")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage))]
    public partial class Message : DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageHeader {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PacketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProtocolField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short ServerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ServerTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourcePortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalSeqField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceMode {
            get {
                return this.DeviceModeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceModeField, value) != true)) {
                    this.DeviceModeField = value;
                    this.RaisePropertyChanged("DeviceMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceSN {
            get {
                return this.DeviceSNField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceSNField, value) != true)) {
                    this.DeviceSNField = value;
                    this.RaisePropertyChanged("DeviceSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PacketId {
            get {
                return this.PacketIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PacketIdField, value) != true)) {
                    this.PacketIdField = value;
                    this.RaisePropertyChanged("PacketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Protocol {
            get {
                return this.ProtocolField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolField, value) != true)) {
                    this.ProtocolField = value;
                    this.RaisePropertyChanged("Protocol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short ServerId {
            get {
                return this.ServerIdField;
            }
            set {
                if ((this.ServerIdField.Equals(value) != true)) {
                    this.ServerIdField = value;
                    this.RaisePropertyChanged("ServerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ServerTime {
            get {
                return this.ServerTimeField;
            }
            set {
                if ((this.ServerTimeField.Equals(value) != true)) {
                    this.ServerTimeField = value;
                    this.RaisePropertyChanged("ServerTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceIP {
            get {
                return this.SourceIPField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceIPField, value) != true)) {
                    this.SourceIPField = value;
                    this.RaisePropertyChanged("SourceIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourcePort {
            get {
                return this.SourcePortField;
            }
            set {
                if ((this.SourcePortField.Equals(value) != true)) {
                    this.SourcePortField = value;
                    this.RaisePropertyChanged("SourcePort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalSeq {
            get {
                return this.TotalSeqField;
            }
            set {
                if ((this.TotalSeqField.Equals(value) != true)) {
                    this.TotalSeqField = value;
                    this.RaisePropertyChanged("TotalSeq");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Packet", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Domains.Communications.Messages")]
    [System.SerializableAttribute()]
    public partial class Packet : DeviceCommunicationExtJsWeb.GpsCommunicationService.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AckStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfsRevisionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceIpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DevicePortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> IgnoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LocalHeaderTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageTypeViewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PacketListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RawPacketField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RouteMessageToField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AckState {
            get {
                return this.AckStateField;
            }
            set {
                if ((object.ReferenceEquals(this.AckStateField, value) != true)) {
                    this.AckStateField = value;
                    this.RaisePropertyChanged("AckState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfsRevision {
            get {
                return this.ConfsRevisionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfsRevisionField, value) != true)) {
                    this.ConfsRevisionField = value;
                    this.RaisePropertyChanged("ConfsRevision");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceIp {
            get {
                return this.DeviceIpField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceIpField, value) != true)) {
                    this.DeviceIpField = value;
                    this.RaisePropertyChanged("DeviceIp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DevicePort {
            get {
                return this.DevicePortField;
            }
            set {
                if ((this.DevicePortField.Equals(value) != true)) {
                    this.DevicePortField = value;
                    this.RaisePropertyChanged("DevicePort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> Ignore {
            get {
                return this.IgnoreField;
            }
            set {
                if ((this.IgnoreField.Equals(value) != true)) {
                    this.IgnoreField = value;
                    this.RaisePropertyChanged("Ignore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LocalHeaderTime {
            get {
                return this.LocalHeaderTimeField;
            }
            set {
                if ((this.LocalHeaderTimeField.Equals(value) != true)) {
                    this.LocalHeaderTimeField = value;
                    this.RaisePropertyChanged("LocalHeaderTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageTypeView {
            get {
                return this.MessageTypeViewField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageTypeViewField, value) != true)) {
                    this.MessageTypeViewField = value;
                    this.RaisePropertyChanged("MessageTypeView");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] PacketList {
            get {
                return this.PacketListField;
            }
            set {
                if ((object.ReferenceEquals(this.PacketListField, value) != true)) {
                    this.PacketListField = value;
                    this.RaisePropertyChanged("PacketList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RawPacket {
            get {
                return this.RawPacketField;
            }
            set {
                if ((object.ReferenceEquals(this.RawPacketField, value) != true)) {
                    this.RawPacketField = value;
                    this.RaisePropertyChanged("RawPacket");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RouteMessageTo {
            get {
                return this.RouteMessageToField;
            }
            set {
                if ((object.ReferenceEquals(this.RouteMessageToField, value) != true)) {
                    this.RouteMessageToField = value;
                    this.RaisePropertyChanged("RouteMessageTo");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Domains.Communications.Messages")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Undefined = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GoodMorning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GoodNight = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HealthAndInfo = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GsmInfo = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GsmInfoArray = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dummy = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GpsAwake = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GpsAwakeArray = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ObdCore = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GpsFirstFix = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeoPoint = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultiGeoPoint = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CumulativeDurationForNonGeopoint = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FreezeFrame = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FreezeFrameArray = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JourneySummary = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GprsStats = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EulerAngles = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EulerAnglesArray = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RawAcceleration = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RawAcceleration2 = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RawAccelerationArray = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonGeoPointGsmInfo = 23,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonGeoPointGsmInfoArray = 24,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonGeoPointGpsInfo = 25,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonGeoPointGpsInfoArray = 26,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NonGeoPointAdditionalInfo = 27,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartJourney = 28,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InternalBatterySoh = 29,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ConfigurationUpdate = 30,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MileageReportDuringJourney = 31,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ButtonTriggered = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TowingAlert = 33,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sms = 34,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpactAlert1 = 35,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpactAlert1Info = 36,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpactAlert2 = 37,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpactAlert2Info = 38,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpactAlert1Array = 39,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ImpactAlert2Array = 40,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EngineStartStopAlert = 41,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VehicleBatteryLowAlert = 42,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeoFenceAlert = 43,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FuelDropAlert = 44,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FuelThreholdAlert = 45,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IdlingAlert = 46,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ObdDtcCodesAlert = 47,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ResponseSimple = 48,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CalibrationInformation = 49,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PidsData = 50,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FwDumpConfigurationData = 51,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlgorithmConf = 52,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HistogramsConf = 53,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TowingConf = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeoFenceConf = 55,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        VehicleBatteryConf = 56,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FuelDropConf = 57,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IdlingConf = 58,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ObdConf = 59,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GeoPointProfileConf = 60,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SerialPortConf = 61,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CommunicationProtocolConf = 62,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EngineStartStopConf = 63,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GpsLossReturnConf = 64,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Gps3DFixConf = 65,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JourneySummaryConf = 66,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AGpsConf = 67,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AesKeyConf = 68,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InternalBatteryConf = 69,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TiltAlertConf = 70,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HistogramsBinConf = 71,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ObdProtocolConf = 72,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StationeryAlertConf = 73,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUploadHistogram = 74,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RequestObdData = 75,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RequestLocationUpdate = 76,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUploadGeoPointLast48Hrs = 77,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUploadGeoPointInMemory = 78,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUploadLastGeoPointsInMemory = 79,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUploadRawAcceleration = 80,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EncryptionOption = 81,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CompressionOption = 82,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OtaUpgrade = 83,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceDownloadOfAgps = 84,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PairDeviceAndDongle = 85,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClearDataOnDevice = 86,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceToChangeProfile = 87,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeleteBinCountHistogram = 88,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceToUploadHealthAndInfo = 89,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RequestGsmCellDataOnMemory = 90,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceToChangeGpsReceptionOption = 91,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceToChangeObdProtocol = 92,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceRequestButton = 93,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FastDpCommand = 94,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceUploadPid = 95,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForceToDumpFwConfigurationAndProfile = 96,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CasingOpeningAlert = 97,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PowerLossAlert = 98,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OtaHeaderRequest = 99,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OtaBinDataRequest = 100,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OtaConfirmationRequest = 101,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgpsBlock = 102,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GsmCellIdCapture = 103,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GsmCellIdCaptureArray = 104,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Histograms = 105,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HistogramInfo = 106,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HistogramBinRawData = 107,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HistogramsArray = 108,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FastDPScore = 109,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TiltAlert = 110,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WakeAlert = 111,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StationeryStartStopAlert = 112,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        KF3ButtonCombo = 113,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GpsFixAlert = 114,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AlertOta = 115,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AgpsRequest = 116,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PacketDto", Namespace="http://schemas.datacontract.org/2004/07/CarPass.Services.Communications.Contracts" +
        ".Dtos")]
    [System.SerializableAttribute()]
    public partial class PacketDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageType MessageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PacketIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] RawPacketField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.MessageType MessageType {
            get {
                return this.MessageTypeField;
            }
            set {
                if ((this.MessageTypeField.Equals(value) != true)) {
                    this.MessageTypeField = value;
                    this.RaisePropertyChanged("MessageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PacketId {
            get {
                return this.PacketIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PacketIdField, value) != true)) {
                    this.PacketIdField = value;
                    this.RaisePropertyChanged("PacketId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] RawPacket {
            get {
                return this.RawPacketField;
            }
            set {
                if ((object.ReferenceEquals(this.RawPacketField, value) != true)) {
                    this.RawPacketField = value;
                    this.RaisePropertyChanged("RawPacket");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GpsCommunicationService.IGpsCommunicationContract")]
    public interface IGpsCommunicationContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetRequestAckCommandStackMessage", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetRequestAckCommandStackMessageResp" +
            "onse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage[] GetRequestAckCommandStackMessage(string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetMessageDescriptionByPacketId", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetMessageDescriptionByPacketIdRespo" +
            "nse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet GetMessageDescriptionByPacketId(string packetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetPacketDtoByPacketId", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetPacketDtoByPacketIdResponse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.PacketDto GetPacketDtoByPacketId(string packetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetPacketIdAround", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetPacketIdAroundResponse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet[] GetPacketIdAround(string packetId, System.TimeSpan durationTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetPacketIdAfter", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetPacketIdAfterResponse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet[] GetPacketIdAfter(string packetId, System.TimeSpan afterTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetPacketDtoAfter", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetPacketDtoAfterResponse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.PacketDto[] GetPacketDtoAfter(string packetId, System.TimeSpan afterTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetPendingAckRequest", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetPendingAckRequestResponse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage[] GetPendingAckRequest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/GetPendingAckRequestNyImeiAndMessage" +
            "Type", ReplyAction="http://tempuri.org/IGpsCommunicationContract/GetPendingAckRequestNyImeiAndMessage" +
            "TypeResponse")]
        DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage[] GetPendingAckRequestNyImeiAndMessageType(string imei);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsCommunicationContract/RemoveAckRequest", ReplyAction="http://tempuri.org/IGpsCommunicationContract/RemoveAckRequestResponse")]
        void RemoveAckRequest(string imei, int requestId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGpsCommunicationContractChannel : DeviceCommunicationExtJsWeb.GpsCommunicationService.IGpsCommunicationContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GpsCommunicationContractClient : System.ServiceModel.ClientBase<DeviceCommunicationExtJsWeb.GpsCommunicationService.IGpsCommunicationContract>, DeviceCommunicationExtJsWeb.GpsCommunicationService.IGpsCommunicationContract {
        
        public GpsCommunicationContractClient() {
        }
        
        public GpsCommunicationContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GpsCommunicationContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GpsCommunicationContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GpsCommunicationContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage[] GetRequestAckCommandStackMessage(string imei) {
            return base.Channel.GetRequestAckCommandStackMessage(imei);
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet GetMessageDescriptionByPacketId(string packetId) {
            return base.Channel.GetMessageDescriptionByPacketId(packetId);
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.PacketDto GetPacketDtoByPacketId(string packetId) {
            return base.Channel.GetPacketDtoByPacketId(packetId);
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet[] GetPacketIdAround(string packetId, System.TimeSpan durationTime) {
            return base.Channel.GetPacketIdAround(packetId, durationTime);
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.Packet[] GetPacketIdAfter(string packetId, System.TimeSpan afterTime) {
            return base.Channel.GetPacketIdAfter(packetId, afterTime);
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.PacketDto[] GetPacketDtoAfter(string packetId, System.TimeSpan afterTime) {
            return base.Channel.GetPacketDtoAfter(packetId, afterTime);
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage[] GetPendingAckRequest() {
            return base.Channel.GetPendingAckRequest();
        }
        
        public DeviceCommunicationExtJsWeb.GpsCommunicationService.RequestAckCommandMessage[] GetPendingAckRequestNyImeiAndMessageType(string imei) {
            return base.Channel.GetPendingAckRequestNyImeiAndMessageType(imei);
        }
        
        public void RemoveAckRequest(string imei, int requestId) {
            base.Channel.RemoveAckRequest(imei, requestId);
        }
    }
}
